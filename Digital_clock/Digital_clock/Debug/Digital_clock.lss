
Digital_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001048  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00001048  000010dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080006e  0080006e  000010ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000111c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000280  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000276c  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e2d  00000000  00000000  00003b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001694  00000000  00000000  00004971  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000059c  00000000  00000000  00006008  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008d0  00000000  00000000  000065a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c62  00000000  00000000  00006e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00007ad6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__vector_1>
       8:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <__vector_2>
       c:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__vector_3>
      10:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 23 07 	jmp	0xe46	; 0xe46 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 38       	cpi	r26, 0x80	; 128
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 58 05 	call	0xab0	; 0xab0 <main>
      8a:	0c 94 22 08 	jmp	0x1044	; 0x1044 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <increment_seconds>:
	
	// Prescaler 8 and Freq 1 Mhz --> each tick = 8 us
	// 125 ticks == 1000 us == 1 ms
	// 1000ms == 1000 interrupts needed

	if (flag == 0)
      92:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <flag>
      96:	81 11       	cpse	r24, r1
      98:	09 c0       	rjmp	.+18     	; 0xac <increment_seconds+0x1a>
	{
		ovf_counter++;
      9a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <ovf_counter.1713>
      9e:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <ovf_counter.1713+0x1>
      a2:	01 96       	adiw	r24, 0x01	; 1
      a4:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <ovf_counter.1713+0x1>
      a8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <ovf_counter.1713>
	}
	
	if (ovf_counter == 1000)
      ac:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <ovf_counter.1713>
      b0:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <ovf_counter.1713+0x1>
      b4:	88 3e       	cpi	r24, 0xE8	; 232
      b6:	93 40       	sbci	r25, 0x03	; 3
      b8:	49 f4       	brne	.+18     	; 0xcc <increment_seconds+0x3a>
	{
		seconds++;
      ba:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <seconds>
      be:	8f 5f       	subi	r24, 0xFF	; 255
      c0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <seconds>
		ovf_counter = 0;
      c4:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <ovf_counter.1713+0x1>
      c8:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <ovf_counter.1713>
	}
	
	switch (seg_counter)
      cc:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
      d0:	82 30       	cpi	r24, 0x02	; 2
      d2:	c9 f1       	breq	.+114    	; 0x146 <increment_seconds+0xb4>
      d4:	28 f4       	brcc	.+10     	; 0xe0 <increment_seconds+0x4e>
      d6:	88 23       	and	r24, r24
      d8:	61 f0       	breq	.+24     	; 0xf2 <increment_seconds+0x60>
      da:	81 30       	cpi	r24, 0x01	; 1
      dc:	11 f1       	breq	.+68     	; 0x122 <increment_seconds+0x90>
      de:	08 95       	ret
      e0:	84 30       	cpi	r24, 0x04	; 4
      e2:	09 f4       	brne	.+2      	; 0xe6 <increment_seconds+0x54>
      e4:	5a c0       	rjmp	.+180    	; 0x19a <increment_seconds+0x108>
      e6:	08 f4       	brcc	.+2      	; 0xea <increment_seconds+0x58>
      e8:	46 c0       	rjmp	.+140    	; 0x176 <increment_seconds+0xe4>
      ea:	85 30       	cpi	r24, 0x05	; 5
      ec:	09 f4       	brne	.+2      	; 0xf0 <increment_seconds+0x5e>
      ee:	6d c0       	rjmp	.+218    	; 0x1ca <increment_seconds+0x138>
      f0:	08 95       	ret
	{
		case 0:
		SEVEN_SEG_write_digit(SEG0, (seconds % 10));
      f2:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <seconds>
      f6:	8d ec       	ldi	r24, 0xCD	; 205
      f8:	68 9f       	mul	r22, r24
      fa:	81 2d       	mov	r24, r1
      fc:	11 24       	eor	r1, r1
      fe:	86 95       	lsr	r24
     100:	86 95       	lsr	r24
     102:	86 95       	lsr	r24
     104:	88 0f       	add	r24, r24
     106:	98 2f       	mov	r25, r24
     108:	99 0f       	add	r25, r25
     10a:	99 0f       	add	r25, r25
     10c:	89 0f       	add	r24, r25
     10e:	68 1b       	sub	r22, r24
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	0e 94 40 05 	call	0xa80	; 0xa80 <SEVEN_SEG_write_digit>
		seg_counter++;
     116:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
     11a:	8f 5f       	subi	r24, 0xFF	; 255
     11c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
		break;
     120:	08 95       	ret
		
		case 1:
		SEVEN_SEG_write_digit(SEG1, (seconds / 10));
     122:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <seconds>
     126:	6d ec       	ldi	r22, 0xCD	; 205
     128:	86 9f       	mul	r24, r22
     12a:	61 2d       	mov	r22, r1
     12c:	11 24       	eor	r1, r1
     12e:	66 95       	lsr	r22
     130:	66 95       	lsr	r22
     132:	66 95       	lsr	r22
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	0e 94 40 05 	call	0xa80	; 0xa80 <SEVEN_SEG_write_digit>
		seg_counter++;
     13a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
     13e:	8f 5f       	subi	r24, 0xFF	; 255
     140:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
		break;
     144:	08 95       	ret
		
		case 2:
		SEVEN_SEG_write_digit(SEG2, (minutes % 10));
     146:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <minutes>
     14a:	8d ec       	ldi	r24, 0xCD	; 205
     14c:	68 9f       	mul	r22, r24
     14e:	81 2d       	mov	r24, r1
     150:	11 24       	eor	r1, r1
     152:	86 95       	lsr	r24
     154:	86 95       	lsr	r24
     156:	86 95       	lsr	r24
     158:	88 0f       	add	r24, r24
     15a:	98 2f       	mov	r25, r24
     15c:	99 0f       	add	r25, r25
     15e:	99 0f       	add	r25, r25
     160:	89 0f       	add	r24, r25
     162:	68 1b       	sub	r22, r24
     164:	82 e0       	ldi	r24, 0x02	; 2
     166:	0e 94 40 05 	call	0xa80	; 0xa80 <SEVEN_SEG_write_digit>
		seg_counter++;
     16a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
     16e:	8f 5f       	subi	r24, 0xFF	; 255
     170:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
		break;
     174:	08 95       	ret
		
		case 3:
		SEVEN_SEG_write_digit(SEG3, (minutes / 10));
     176:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <minutes>
     17a:	6d ec       	ldi	r22, 0xCD	; 205
     17c:	86 9f       	mul	r24, r22
     17e:	61 2d       	mov	r22, r1
     180:	11 24       	eor	r1, r1
     182:	66 95       	lsr	r22
     184:	66 95       	lsr	r22
     186:	66 95       	lsr	r22
     188:	83 e0       	ldi	r24, 0x03	; 3
     18a:	0e 94 40 05 	call	0xa80	; 0xa80 <SEVEN_SEG_write_digit>
		seg_counter++;
     18e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
     192:	8f 5f       	subi	r24, 0xFF	; 255
     194:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
		break;
     198:	08 95       	ret
		
		case 4:
		SEVEN_SEG_write_digit(SEG4, (hours % 10));
     19a:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     19e:	8d ec       	ldi	r24, 0xCD	; 205
     1a0:	68 9f       	mul	r22, r24
     1a2:	81 2d       	mov	r24, r1
     1a4:	11 24       	eor	r1, r1
     1a6:	86 95       	lsr	r24
     1a8:	86 95       	lsr	r24
     1aa:	86 95       	lsr	r24
     1ac:	88 0f       	add	r24, r24
     1ae:	98 2f       	mov	r25, r24
     1b0:	99 0f       	add	r25, r25
     1b2:	99 0f       	add	r25, r25
     1b4:	89 0f       	add	r24, r25
     1b6:	68 1b       	sub	r22, r24
     1b8:	84 e0       	ldi	r24, 0x04	; 4
     1ba:	0e 94 40 05 	call	0xa80	; 0xa80 <SEVEN_SEG_write_digit>
		seg_counter++;
     1be:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
     1c2:	8f 5f       	subi	r24, 0xFF	; 255
     1c4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
		break;
     1c8:	08 95       	ret
		
		case 5:
		SEVEN_SEG_write_digit(SEG5, (hours / 10));
     1ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1ce:	6d ec       	ldi	r22, 0xCD	; 205
     1d0:	86 9f       	mul	r24, r22
     1d2:	61 2d       	mov	r22, r1
     1d4:	11 24       	eor	r1, r1
     1d6:	66 95       	lsr	r22
     1d8:	66 95       	lsr	r22
     1da:	66 95       	lsr	r22
     1dc:	85 e0       	ldi	r24, 0x05	; 5
     1de:	0e 94 40 05 	call	0xa80	; 0xa80 <SEVEN_SEG_write_digit>
		seg_counter = 0;
     1e2:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
     1e6:	08 95       	ret

000001e8 <APP_init>:
* Purpose      : Initialize app
* Parameters   : Void
* Return value : Void
*****************************************************************************/
void APP_init(void){
	LCD_init();
     1e8:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_init>
	TIMER2_ctcMode_init(125, increment_seconds);
     1ec:	69 e4       	ldi	r22, 0x49	; 73
     1ee:	70 e0       	ldi	r23, 0x00	; 0
     1f0:	8d e7       	ldi	r24, 0x7D	; 125
     1f2:	0e 94 77 07 	call	0xeee	; 0xeee <TIMER2_ctcMode_init>
	
	SEVEN_SEG_init();
     1f6:	0e 94 39 05 	call	0xa72	; 0xa72 <SEVEN_SEG_init>
	BUTTON_init(PORTD_t, PIN2_t);
     1fa:	62 e0       	ldi	r22, 0x02	; 2
     1fc:	83 e0       	ldi	r24, 0x03	; 3
     1fe:	0e 94 07 02 	call	0x40e	; 0x40e <BUTTON_init>
	
	KEYPAD_init();
     202:	0e 94 16 02 	call	0x42c	; 0x42c <KEYPAD_init>
     206:	08 95       	ret

00000208 <get_key_value>:
* Function Name: get_key_value
* Purpose      : Reads a pressed keypad key
* Parameters   : Void
* Return value : Pressed key (uint8_t)
*****************************************************************************/
uint8_t get_key_value(void){
     208:	cf 93       	push	r28
	uint8_t key;
	key = KEYPAD_read();
     20a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <KEYPAD_read>
     20e:	c8 2f       	mov	r28, r24
	
	// Stuck in the loop until user press a key
	// key == 0 means it's still null, meaning user still didn't press any key
	while (key == 0)
     210:	03 c0       	rjmp	.+6      	; 0x218 <get_key_value+0x10>
	{
		key = KEYPAD_read();
     212:	0e 94 53 02 	call	0x4a6	; 0x4a6 <KEYPAD_read>
     216:	c8 2f       	mov	r28, r24
	uint8_t key;
	key = KEYPAD_read();
	
	// Stuck in the loop until user press a key
	// key == 0 means it's still null, meaning user still didn't press any key
	while (key == 0)
     218:	cc 23       	and	r28, r28
     21a:	d9 f3       	breq	.-10     	; 0x212 <get_key_value+0xa>
		key = KEYPAD_read();
	}
	
	//LCD_write_data(key);
	// Stuck if user kept pressing the key until he release
	while (KEYPAD_read() == key);
     21c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <KEYPAD_read>
     220:	c8 17       	cp	r28, r24
     222:	e1 f3       	breq	.-8      	; 0x21c <get_key_value+0x14>
	
	return key;
}
     224:	8c 2f       	mov	r24, r28
     226:	cf 91       	pop	r28
     228:	08 95       	ret

0000022a <APP_loop>:
	while (1)
	{
		/***********************************************************************************************************************************/
		/********************************************************** EDIT MODE **************************************************************/
		/***********************************************************************************************************************************/
		switch (mode)
     22a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <mode>
     22e:	88 23       	and	r24, r24
     230:	21 f0       	breq	.+8      	; 0x23a <APP_loop+0x10>
     232:	81 30       	cpi	r24, 0x01	; 1
     234:	09 f4       	brne	.+2      	; 0x238 <APP_loop+0xe>
     236:	96 c0       	rjmp	.+300    	; 0x364 <APP_loop+0x13a>
     238:	f8 cf       	rjmp	.-16     	; 0x22a <APP_loop>
		{
			case NORMAL_MODE:
			// Checks if user needed edit mode
			key = KEYPAD_read();
     23a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <KEYPAD_read>
			if (key == 'C')
     23e:	83 34       	cpi	r24, 0x43	; 67
     240:	31 f4       	brne	.+12     	; 0x24e <APP_loop+0x24>
			{
				mode = EDIT_MODE;
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <mode>
				//edit_click++;
				flag = 1;
     248:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <flag>
				continue;			// Skip iteration to go to edit mode
     24c:	ee cf       	rjmp	.-36     	; 0x22a <APP_loop>
			}
			
			if (seconds == 60)
     24e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <seconds>
     252:	8c 33       	cpi	r24, 0x3C	; 60
     254:	39 f4       	brne	.+14     	; 0x264 <APP_loop+0x3a>
			{
				minutes++;
     256:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <minutes>
     25a:	8f 5f       	subi	r24, 0xFF	; 255
     25c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <minutes>
				seconds = 0;
     260:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <seconds>
			}
			
			if (minutes == 60)
     264:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <minutes>
     268:	8c 33       	cpi	r24, 0x3C	; 60
     26a:	39 f4       	brne	.+14     	; 0x27a <APP_loop+0x50>
			{
				hours++;
     26c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     270:	8f 5f       	subi	r24, 0xFF	; 255
     272:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				minutes = 0;
     276:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <minutes>
			}
			
			if (hours == 24)
     27a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     27e:	88 31       	cpi	r24, 0x18	; 24
     280:	31 f4       	brne	.+12     	; 0x28e <APP_loop+0x64>
			{
				seconds = 0;
     282:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <seconds>
				minutes = 0;
     286:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <minutes>
				hours = 0;
     28a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			}

			LCD_write_command(0x80);
     28e:	80 e8       	ldi	r24, 0x80	; 128
     290:	0e 94 41 03 	call	0x682	; 0x682 <LCD_write_command>
			LCD_write_number(hours / 10);
     294:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     298:	cd ec       	ldi	r28, 0xCD	; 205
     29a:	6c 9f       	mul	r22, r28
     29c:	61 2d       	mov	r22, r1
     29e:	11 24       	eor	r1, r1
     2a0:	66 95       	lsr	r22
     2a2:	66 95       	lsr	r22
     2a4:	66 95       	lsr	r22
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_write_number>
			LCD_write_number(hours % 10);
     2b0:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     2b4:	6c 9f       	mul	r22, r28
     2b6:	81 2d       	mov	r24, r1
     2b8:	11 24       	eor	r1, r1
     2ba:	86 95       	lsr	r24
     2bc:	86 95       	lsr	r24
     2be:	86 95       	lsr	r24
     2c0:	88 0f       	add	r24, r24
     2c2:	98 2f       	mov	r25, r24
     2c4:	99 0f       	add	r25, r25
     2c6:	99 0f       	add	r25, r25
     2c8:	89 0f       	add	r24, r25
     2ca:	68 1b       	sub	r22, r24
     2cc:	70 e0       	ldi	r23, 0x00	; 0
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_write_number>
			LCD_write_data(':');
     2d6:	8a e3       	ldi	r24, 0x3A	; 58
     2d8:	0e 94 20 04 	call	0x840	; 0x840 <LCD_write_data>
			LCD_write_number(minutes / 10);
     2dc:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <minutes>
     2e0:	6c 9f       	mul	r22, r28
     2e2:	61 2d       	mov	r22, r1
     2e4:	11 24       	eor	r1, r1
     2e6:	66 95       	lsr	r22
     2e8:	66 95       	lsr	r22
     2ea:	66 95       	lsr	r22
     2ec:	70 e0       	ldi	r23, 0x00	; 0
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_write_number>
			LCD_write_number(minutes % 10);
     2f6:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <minutes>
     2fa:	6c 9f       	mul	r22, r28
     2fc:	81 2d       	mov	r24, r1
     2fe:	11 24       	eor	r1, r1
     300:	86 95       	lsr	r24
     302:	86 95       	lsr	r24
     304:	86 95       	lsr	r24
     306:	88 0f       	add	r24, r24
     308:	98 2f       	mov	r25, r24
     30a:	99 0f       	add	r25, r25
     30c:	99 0f       	add	r25, r25
     30e:	89 0f       	add	r24, r25
     310:	68 1b       	sub	r22, r24
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_write_number>
			LCD_write_data(':');
     31c:	8a e3       	ldi	r24, 0x3A	; 58
     31e:	0e 94 20 04 	call	0x840	; 0x840 <LCD_write_data>
			LCD_write_number(seconds / 10);
     322:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <seconds>
     326:	6c 9f       	mul	r22, r28
     328:	61 2d       	mov	r22, r1
     32a:	11 24       	eor	r1, r1
     32c:	66 95       	lsr	r22
     32e:	66 95       	lsr	r22
     330:	66 95       	lsr	r22
     332:	70 e0       	ldi	r23, 0x00	; 0
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_write_number>
			LCD_write_number(seconds % 10);
     33c:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <seconds>
     340:	6c 9f       	mul	r22, r28
     342:	c1 2d       	mov	r28, r1
     344:	11 24       	eor	r1, r1
     346:	c6 95       	lsr	r28
     348:	c6 95       	lsr	r28
     34a:	c6 95       	lsr	r28
     34c:	cc 0f       	add	r28, r28
     34e:	8c 2f       	mov	r24, r28
     350:	88 0f       	add	r24, r24
     352:	88 0f       	add	r24, r24
     354:	c8 0f       	add	r28, r24
     356:	6c 1b       	sub	r22, r28
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_write_number>
			break;
     362:	63 cf       	rjmp	.-314    	; 0x22a <APP_loop>
			/********************************************************** EDIT MODE **************************************************************/
			/***********************************************************************************************************************************/
			
			case EDIT_MODE:
			
			key = get_key_value();
     364:	0e 94 04 01 	call	0x208	; 0x208 <get_key_value>
			
			switch (key)
     368:	8d 32       	cpi	r24, 0x2D	; 45
     36a:	91 f1       	breq	.+100    	; 0x3d0 <APP_loop+0x1a6>
     36c:	83 34       	cpi	r24, 0x43	; 67
     36e:	21 f0       	breq	.+8      	; 0x378 <APP_loop+0x14e>
     370:	8b 32       	cpi	r24, 0x2B	; 43
     372:	09 f0       	breq	.+2      	; 0x376 <APP_loop+0x14c>
     374:	5a cf       	rjmp	.-332    	; 0x22a <APP_loop>
     376:	0f c0       	rjmp	.+30     	; 0x396 <APP_loop+0x16c>
			{
				case 'C':
				edit_click++;
     378:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <edit_click>
     37c:	8f 5f       	subi	r24, 0xFF	; 255
     37e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <edit_click>
				if (edit_click == 3)
     382:	83 30       	cpi	r24, 0x03	; 3
     384:	09 f0       	breq	.+2      	; 0x388 <APP_loop+0x15e>
     386:	51 cf       	rjmp	.-350    	; 0x22a <APP_loop>
				{
					flag = 0;
     388:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <flag>
					edit_click = 0;
     38c:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <edit_click>
					mode = NORMAL_MODE;
     390:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <mode>
					continue;
     394:	4a cf       	rjmp	.-364    	; 0x22a <APP_loop>
				}
				break;
				
				case '+':
				if (edit_click == 1)
     396:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <edit_click>
     39a:	81 30       	cpi	r24, 0x01	; 1
     39c:	59 f4       	brne	.+22     	; 0x3b4 <APP_loop+0x18a>
				{
					if (minutes == 59)
     39e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <minutes>
     3a2:	8b 33       	cpi	r24, 0x3B	; 59
     3a4:	19 f4       	brne	.+6      	; 0x3ac <APP_loop+0x182>
					{
						minutes = 0;
     3a6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <minutes>
     3aa:	3f cf       	rjmp	.-386    	; 0x22a <APP_loop>
					}
					else
					{
						minutes++;
     3ac:	8f 5f       	subi	r24, 0xFF	; 255
     3ae:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <minutes>
     3b2:	3b cf       	rjmp	.-394    	; 0x22a <APP_loop>
					}
				}
				else if (edit_click == 2)
     3b4:	82 30       	cpi	r24, 0x02	; 2
     3b6:	09 f0       	breq	.+2      	; 0x3ba <APP_loop+0x190>
     3b8:	38 cf       	rjmp	.-400    	; 0x22a <APP_loop>
				{
					if (hours == 23)
     3ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     3be:	87 31       	cpi	r24, 0x17	; 23
     3c0:	19 f4       	brne	.+6      	; 0x3c8 <APP_loop+0x19e>
					{
						hours = 0;
     3c2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     3c6:	31 cf       	rjmp	.-414    	; 0x22a <APP_loop>
					}
					else
					{
						hours++;
     3c8:	8f 5f       	subi	r24, 0xFF	; 255
     3ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     3ce:	2d cf       	rjmp	.-422    	; 0x22a <APP_loop>
					}
				}
				break;
				
				case '-':
				if (edit_click == 1)
     3d0:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <edit_click>
     3d4:	81 30       	cpi	r24, 0x01	; 1
     3d6:	61 f4       	brne	.+24     	; 0x3f0 <APP_loop+0x1c6>
				{
					if (minutes == 0)
     3d8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <minutes>
     3dc:	81 11       	cpse	r24, r1
     3de:	04 c0       	rjmp	.+8      	; 0x3e8 <APP_loop+0x1be>
					{
						minutes = 59;
     3e0:	8b e3       	ldi	r24, 0x3B	; 59
     3e2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <minutes>
     3e6:	21 cf       	rjmp	.-446    	; 0x22a <APP_loop>
					}
					else
					{
						minutes--;
     3e8:	81 50       	subi	r24, 0x01	; 1
     3ea:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <minutes>
     3ee:	1d cf       	rjmp	.-454    	; 0x22a <APP_loop>
					}
				}
				else if (edit_click == 2)
     3f0:	82 30       	cpi	r24, 0x02	; 2
     3f2:	09 f0       	breq	.+2      	; 0x3f6 <APP_loop+0x1cc>
     3f4:	1a cf       	rjmp	.-460    	; 0x22a <APP_loop>
				{
					if (hours == 0)
     3f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     3fa:	81 11       	cpse	r24, r1
     3fc:	04 c0       	rjmp	.+8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
					{
						hours = 23;
     3fe:	87 e1       	ldi	r24, 0x17	; 23
     400:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     404:	12 cf       	rjmp	.-476    	; 0x22a <APP_loop>
					}
					else
					{
						hours--;
     406:	81 50       	subi	r24, 0x01	; 1
     408:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     40c:	0e cf       	rjmp	.-484    	; 0x22a <APP_loop>

0000040e <BUTTON_init>:
* Function Name: BUTTON_init
* Purpose      : Initialize button
* Parameters   : Register name, pin number
* Return value : Void
*****************************************************************************/
void BUTTON_init(REG_name_t reg, PIN_num_t pin){
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	c8 2f       	mov	r28, r24
     414:	d6 2f       	mov	r29, r22
	DIO_init_pin(reg, pin, INPUT);	
     416:	40 e0       	ldi	r20, 0x00	; 0
     418:	0e 94 5f 05 	call	0xabe	; 0xabe <DIO_init_pin>
	DIO_write(reg, pin, HIGH);
     41c:	41 e0       	ldi	r20, 0x01	; 1
     41e:	6d 2f       	mov	r22, r29
     420:	8c 2f       	mov	r24, r28
     422:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
}
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	08 95       	ret

0000042c <KEYPAD_init>:
* Parameters   : Void
* Return value : Void
*****************************************************************************/
void KEYPAD_init(void){
	// Set pins 4-7 as output & 0-3 as input pull-up
	DIO_init_pin(PORTB_t, PIN0_t, INPUT);
     42c:	40 e0       	ldi	r20, 0x00	; 0
     42e:	60 e0       	ldi	r22, 0x00	; 0
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	0e 94 5f 05 	call	0xabe	; 0xabe <DIO_init_pin>
	DIO_init_pin(PORTB_t, PIN1_t, INPUT);
     436:	40 e0       	ldi	r20, 0x00	; 0
     438:	61 e0       	ldi	r22, 0x01	; 1
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	0e 94 5f 05 	call	0xabe	; 0xabe <DIO_init_pin>
	DIO_init_pin(PORTB_t, PIN2_t, INPUT);
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	62 e0       	ldi	r22, 0x02	; 2
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	0e 94 5f 05 	call	0xabe	; 0xabe <DIO_init_pin>
	DIO_init_pin(PORTB_t, PIN3_t, INPUT);
     44a:	40 e0       	ldi	r20, 0x00	; 0
     44c:	63 e0       	ldi	r22, 0x03	; 3
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	0e 94 5f 05 	call	0xabe	; 0xabe <DIO_init_pin>
	DIO_write(PORTB_t, PIN0_t, HIGH);
     454:	41 e0       	ldi	r20, 0x01	; 1
     456:	60 e0       	ldi	r22, 0x00	; 0
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
	DIO_write(PORTB_t, PIN1_t, HIGH);
     45e:	41 e0       	ldi	r20, 0x01	; 1
     460:	61 e0       	ldi	r22, 0x01	; 1
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
	DIO_write(PORTB_t, PIN2_t, HIGH);
     468:	41 e0       	ldi	r20, 0x01	; 1
     46a:	62 e0       	ldi	r22, 0x02	; 2
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
	DIO_write(PORTB_t, PIN3_t, HIGH);
     472:	41 e0       	ldi	r20, 0x01	; 1
     474:	63 e0       	ldi	r22, 0x03	; 3
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
	
	DIO_init_pin(PORTB_t, PIN4_t, OUTPUT);
     47c:	41 e0       	ldi	r20, 0x01	; 1
     47e:	64 e0       	ldi	r22, 0x04	; 4
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	0e 94 5f 05 	call	0xabe	; 0xabe <DIO_init_pin>
	DIO_init_pin(PORTB_t, PIN5_t, OUTPUT);
     486:	41 e0       	ldi	r20, 0x01	; 1
     488:	65 e0       	ldi	r22, 0x05	; 5
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	0e 94 5f 05 	call	0xabe	; 0xabe <DIO_init_pin>
	DIO_init_pin(PORTB_t, PIN6_t, OUTPUT);
     490:	41 e0       	ldi	r20, 0x01	; 1
     492:	66 e0       	ldi	r22, 0x06	; 6
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	0e 94 5f 05 	call	0xabe	; 0xabe <DIO_init_pin>
	DIO_init_pin(PORTB_t, PIN7_t, OUTPUT);
     49a:	41 e0       	ldi	r20, 0x01	; 1
     49c:	67 e0       	ldi	r22, 0x07	; 7
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	0e 94 5f 05 	call	0xabe	; 0xabe <DIO_init_pin>
     4a4:	08 95       	ret

000004a6 <KEYPAD_read>:
* Purpose      : Reads a keypad key
* Parameters   : Void
* Return value : Pressed key (uint8_t)
*****************************************************************************/
uint8_t KEYPAD_read(void){
	K4(0); K5(1); K6(1); K7(1);	
     4a6:	40 e0       	ldi	r20, 0x00	; 0
     4a8:	64 e0       	ldi	r22, 0x04	; 4
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     4b0:	41 e0       	ldi	r20, 0x01	; 1
     4b2:	65 e0       	ldi	r22, 0x05	; 5
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     4ba:	41 e0       	ldi	r20, 0x01	; 1
     4bc:	66 e0       	ldi	r22, 0x06	; 6
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     4c4:	41 e0       	ldi	r20, 0x01	; 1
     4c6:	67 e0       	ldi	r22, 0x07	; 7
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
	
	if(K0 == 0) return keypad_matrix[0];
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <DIO_read>
     4d6:	88 23       	and	r24, r24
     4d8:	09 f4       	brne	.+2      	; 0x4dc <KEYPAD_read+0x36>
     4da:	b3 c0       	rjmp	.+358    	; 0x642 <KEYPAD_read+0x19c>
	if(K1 == 0) return keypad_matrix[4];
     4dc:	61 e0       	ldi	r22, 0x01	; 1
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <DIO_read>
     4e4:	88 23       	and	r24, r24
     4e6:	09 f4       	brne	.+2      	; 0x4ea <KEYPAD_read+0x44>
     4e8:	ae c0       	rjmp	.+348    	; 0x646 <KEYPAD_read+0x1a0>
	if(K2 == 0) return keypad_matrix[8];
     4ea:	62 e0       	ldi	r22, 0x02	; 2
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <DIO_read>
     4f2:	88 23       	and	r24, r24
     4f4:	09 f4       	brne	.+2      	; 0x4f8 <KEYPAD_read+0x52>
     4f6:	a9 c0       	rjmp	.+338    	; 0x64a <KEYPAD_read+0x1a4>
	if(K3 == 0) return keypad_matrix[12];
     4f8:	63 e0       	ldi	r22, 0x03	; 3
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <DIO_read>
     500:	88 23       	and	r24, r24
     502:	09 f4       	brne	.+2      	; 0x506 <KEYPAD_read+0x60>
     504:	a4 c0       	rjmp	.+328    	; 0x64e <KEYPAD_read+0x1a8>
	delay_ms(1);
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	0e 94 c8 07 	call	0xf90	; 0xf90 <delay_ms>
	
	K4(1); K5(0); K6(1); K7(1);
     50e:	41 e0       	ldi	r20, 0x01	; 1
     510:	64 e0       	ldi	r22, 0x04	; 4
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     518:	40 e0       	ldi	r20, 0x00	; 0
     51a:	65 e0       	ldi	r22, 0x05	; 5
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     522:	41 e0       	ldi	r20, 0x01	; 1
     524:	66 e0       	ldi	r22, 0x06	; 6
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     52c:	41 e0       	ldi	r20, 0x01	; 1
     52e:	67 e0       	ldi	r22, 0x07	; 7
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
	if(K0 == 0) return keypad_matrix[1];
     536:	60 e0       	ldi	r22, 0x00	; 0
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <DIO_read>
     53e:	88 23       	and	r24, r24
     540:	09 f4       	brne	.+2      	; 0x544 <KEYPAD_read+0x9e>
     542:	87 c0       	rjmp	.+270    	; 0x652 <KEYPAD_read+0x1ac>
	if(K1 == 0) return keypad_matrix[5];
     544:	61 e0       	ldi	r22, 0x01	; 1
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <DIO_read>
     54c:	88 23       	and	r24, r24
     54e:	09 f4       	brne	.+2      	; 0x552 <KEYPAD_read+0xac>
     550:	82 c0       	rjmp	.+260    	; 0x656 <KEYPAD_read+0x1b0>
	if(K2 == 0) return keypad_matrix[9];
     552:	62 e0       	ldi	r22, 0x02	; 2
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <DIO_read>
     55a:	88 23       	and	r24, r24
     55c:	09 f4       	brne	.+2      	; 0x560 <KEYPAD_read+0xba>
     55e:	7d c0       	rjmp	.+250    	; 0x65a <KEYPAD_read+0x1b4>
	if(K3 == 0) return keypad_matrix[13];
     560:	63 e0       	ldi	r22, 0x03	; 3
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <DIO_read>
     568:	88 23       	and	r24, r24
     56a:	09 f4       	brne	.+2      	; 0x56e <KEYPAD_read+0xc8>
     56c:	78 c0       	rjmp	.+240    	; 0x65e <KEYPAD_read+0x1b8>
	delay_ms(1);
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0e 94 c8 07 	call	0xf90	; 0xf90 <delay_ms>
	
	K4(1); K5(1); K6(0); K7(1);
     576:	41 e0       	ldi	r20, 0x01	; 1
     578:	64 e0       	ldi	r22, 0x04	; 4
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     580:	41 e0       	ldi	r20, 0x01	; 1
     582:	65 e0       	ldi	r22, 0x05	; 5
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     58a:	40 e0       	ldi	r20, 0x00	; 0
     58c:	66 e0       	ldi	r22, 0x06	; 6
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     594:	41 e0       	ldi	r20, 0x01	; 1
     596:	67 e0       	ldi	r22, 0x07	; 7
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
	if(K0 == 0) return keypad_matrix[2];
     59e:	60 e0       	ldi	r22, 0x00	; 0
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <DIO_read>
     5a6:	88 23       	and	r24, r24
     5a8:	09 f4       	brne	.+2      	; 0x5ac <KEYPAD_read+0x106>
     5aa:	5b c0       	rjmp	.+182    	; 0x662 <KEYPAD_read+0x1bc>
	if(K1 == 0) return keypad_matrix[6];
     5ac:	61 e0       	ldi	r22, 0x01	; 1
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <DIO_read>
     5b4:	88 23       	and	r24, r24
     5b6:	09 f4       	brne	.+2      	; 0x5ba <KEYPAD_read+0x114>
     5b8:	56 c0       	rjmp	.+172    	; 0x666 <KEYPAD_read+0x1c0>
	if(K2 == 0) return keypad_matrix[10];
     5ba:	62 e0       	ldi	r22, 0x02	; 2
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <DIO_read>
     5c2:	88 23       	and	r24, r24
     5c4:	09 f4       	brne	.+2      	; 0x5c8 <KEYPAD_read+0x122>
     5c6:	51 c0       	rjmp	.+162    	; 0x66a <KEYPAD_read+0x1c4>
	if(K3 == 0) return keypad_matrix[14];
     5c8:	63 e0       	ldi	r22, 0x03	; 3
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <DIO_read>
     5d0:	88 23       	and	r24, r24
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <KEYPAD_read+0x130>
     5d4:	4c c0       	rjmp	.+152    	; 0x66e <KEYPAD_read+0x1c8>
	delay_ms(1);
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	0e 94 c8 07 	call	0xf90	; 0xf90 <delay_ms>
	
	K4(1); K5(1); K6(1); K7(0);
     5de:	41 e0       	ldi	r20, 0x01	; 1
     5e0:	64 e0       	ldi	r22, 0x04	; 4
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     5e8:	41 e0       	ldi	r20, 0x01	; 1
     5ea:	65 e0       	ldi	r22, 0x05	; 5
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     5f2:	41 e0       	ldi	r20, 0x01	; 1
     5f4:	66 e0       	ldi	r22, 0x06	; 6
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     5fc:	40 e0       	ldi	r20, 0x00	; 0
     5fe:	67 e0       	ldi	r22, 0x07	; 7
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
	if(K0 == 0) return keypad_matrix[3];
     606:	60 e0       	ldi	r22, 0x00	; 0
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <DIO_read>
     60e:	88 23       	and	r24, r24
     610:	81 f1       	breq	.+96     	; 0x672 <KEYPAD_read+0x1cc>
	if(K1 == 0) return keypad_matrix[7];
     612:	61 e0       	ldi	r22, 0x01	; 1
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <DIO_read>
     61a:	88 23       	and	r24, r24
     61c:	61 f1       	breq	.+88     	; 0x676 <KEYPAD_read+0x1d0>
	if(K2 == 0) return keypad_matrix[11];
     61e:	62 e0       	ldi	r22, 0x02	; 2
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <DIO_read>
     626:	88 23       	and	r24, r24
     628:	41 f1       	breq	.+80     	; 0x67a <KEYPAD_read+0x1d4>
	if(K3 == 0) return keypad_matrix[15];
     62a:	63 e0       	ldi	r22, 0x03	; 3
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <DIO_read>
     632:	88 23       	and	r24, r24
     634:	21 f1       	breq	.+72     	; 0x67e <KEYPAD_read+0x1d8>
	delay_ms(1);
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 c8 07 	call	0xf90	; 0xf90 <delay_ms>
	
	return 0;
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	08 95       	ret
* Return value : Pressed key (uint8_t)
*****************************************************************************/
uint8_t KEYPAD_read(void){
	K4(0); K5(1); K6(1); K7(1);	
	
	if(K0 == 0) return keypad_matrix[0];
     642:	87 e3       	ldi	r24, 0x37	; 55
     644:	08 95       	ret
	if(K1 == 0) return keypad_matrix[4];
     646:	84 e3       	ldi	r24, 0x34	; 52
     648:	08 95       	ret
	if(K2 == 0) return keypad_matrix[8];
     64a:	81 e3       	ldi	r24, 0x31	; 49
     64c:	08 95       	ret
	if(K3 == 0) return keypad_matrix[12];
     64e:	83 e4       	ldi	r24, 0x43	; 67
     650:	08 95       	ret
	delay_ms(1);
	
	K4(1); K5(0); K6(1); K7(1);
	if(K0 == 0) return keypad_matrix[1];
     652:	88 e3       	ldi	r24, 0x38	; 56
     654:	08 95       	ret
	if(K1 == 0) return keypad_matrix[5];
     656:	85 e3       	ldi	r24, 0x35	; 53
     658:	08 95       	ret
	if(K2 == 0) return keypad_matrix[9];
     65a:	82 e3       	ldi	r24, 0x32	; 50
     65c:	08 95       	ret
	if(K3 == 0) return keypad_matrix[13];
     65e:	80 e3       	ldi	r24, 0x30	; 48
     660:	08 95       	ret
	delay_ms(1);
	
	K4(1); K5(1); K6(0); K7(1);
	if(K0 == 0) return keypad_matrix[2];
     662:	89 e3       	ldi	r24, 0x39	; 57
     664:	08 95       	ret
	if(K1 == 0) return keypad_matrix[6];
     666:	86 e3       	ldi	r24, 0x36	; 54
     668:	08 95       	ret
	if(K2 == 0) return keypad_matrix[10];
     66a:	83 e3       	ldi	r24, 0x33	; 51
     66c:	08 95       	ret
	if(K3 == 0) return keypad_matrix[14];
     66e:	8d e3       	ldi	r24, 0x3D	; 61
     670:	08 95       	ret
	delay_ms(1);
	
	K4(1); K5(1); K6(1); K7(0);
	if(K0 == 0) return keypad_matrix[3];
     672:	8f e2       	ldi	r24, 0x2F	; 47
     674:	08 95       	ret
	if(K1 == 0) return keypad_matrix[7];
     676:	8a e2       	ldi	r24, 0x2A	; 42
     678:	08 95       	ret
	if(K2 == 0) return keypad_matrix[11];
     67a:	8d e2       	ldi	r24, 0x2D	; 45
     67c:	08 95       	ret
	if(K3 == 0) return keypad_matrix[15];
     67e:	8b e2       	ldi	r24, 0x2B	; 43
	delay_ms(1);
	
	return 0;
     680:	08 95       	ret

00000682 <LCD_write_command>:
	while(data[i] != '\0')
	{
		LCD_write_data(data[i]);
		i++;
	}
}
     682:	cf 93       	push	r28
     684:	c8 2f       	mov	r28, r24
     686:	40 e0       	ldi	r20, 0x00	; 0
     688:	61 e0       	ldi	r22, 0x01	; 1
     68a:	83 e0       	ldi	r24, 0x03	; 3
     68c:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     690:	cc 23       	and	r28, r28
     692:	34 f4       	brge	.+12     	; 0x6a0 <LCD_write_command+0x1e>
     694:	41 e0       	ldi	r20, 0x01	; 1
     696:	66 e0       	ldi	r22, 0x06	; 6
     698:	83 e0       	ldi	r24, 0x03	; 3
     69a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     69e:	05 c0       	rjmp	.+10     	; 0x6aa <LCD_write_command+0x28>
     6a0:	40 e0       	ldi	r20, 0x00	; 0
     6a2:	66 e0       	ldi	r22, 0x06	; 6
     6a4:	83 e0       	ldi	r24, 0x03	; 3
     6a6:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     6aa:	c6 ff       	sbrs	r28, 6
     6ac:	06 c0       	rjmp	.+12     	; 0x6ba <LCD_write_command+0x38>
     6ae:	41 e0       	ldi	r20, 0x01	; 1
     6b0:	65 e0       	ldi	r22, 0x05	; 5
     6b2:	83 e0       	ldi	r24, 0x03	; 3
     6b4:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     6b8:	05 c0       	rjmp	.+10     	; 0x6c4 <LCD_write_command+0x42>
     6ba:	40 e0       	ldi	r20, 0x00	; 0
     6bc:	65 e0       	ldi	r22, 0x05	; 5
     6be:	83 e0       	ldi	r24, 0x03	; 3
     6c0:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     6c4:	c5 ff       	sbrs	r28, 5
     6c6:	06 c0       	rjmp	.+12     	; 0x6d4 <LCD_write_command+0x52>
     6c8:	41 e0       	ldi	r20, 0x01	; 1
     6ca:	64 e0       	ldi	r22, 0x04	; 4
     6cc:	83 e0       	ldi	r24, 0x03	; 3
     6ce:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     6d2:	05 c0       	rjmp	.+10     	; 0x6de <LCD_write_command+0x5c>
     6d4:	40 e0       	ldi	r20, 0x00	; 0
     6d6:	64 e0       	ldi	r22, 0x04	; 4
     6d8:	83 e0       	ldi	r24, 0x03	; 3
     6da:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     6de:	c4 ff       	sbrs	r28, 4
     6e0:	06 c0       	rjmp	.+12     	; 0x6ee <LCD_write_command+0x6c>
     6e2:	41 e0       	ldi	r20, 0x01	; 1
     6e4:	63 e0       	ldi	r22, 0x03	; 3
     6e6:	83 e0       	ldi	r24, 0x03	; 3
     6e8:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <LCD_write_command+0x76>
     6ee:	40 e0       	ldi	r20, 0x00	; 0
     6f0:	63 e0       	ldi	r22, 0x03	; 3
     6f2:	83 e0       	ldi	r24, 0x03	; 3
     6f4:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     6f8:	41 e0       	ldi	r20, 0x01	; 1
     6fa:	60 e0       	ldi	r22, 0x00	; 0
     6fc:	83 e0       	ldi	r24, 0x03	; 3
     6fe:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 c8 07 	call	0xf90	; 0xf90 <delay_ms>
     70a:	40 e0       	ldi	r20, 0x00	; 0
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	83 e0       	ldi	r24, 0x03	; 3
     710:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	0e 94 c8 07 	call	0xf90	; 0xf90 <delay_ms>
     71c:	c3 ff       	sbrs	r28, 3
     71e:	06 c0       	rjmp	.+12     	; 0x72c <LCD_write_command+0xaa>
     720:	41 e0       	ldi	r20, 0x01	; 1
     722:	66 e0       	ldi	r22, 0x06	; 6
     724:	83 e0       	ldi	r24, 0x03	; 3
     726:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     72a:	05 c0       	rjmp	.+10     	; 0x736 <LCD_write_command+0xb4>
     72c:	40 e0       	ldi	r20, 0x00	; 0
     72e:	66 e0       	ldi	r22, 0x06	; 6
     730:	83 e0       	ldi	r24, 0x03	; 3
     732:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     736:	c2 ff       	sbrs	r28, 2
     738:	06 c0       	rjmp	.+12     	; 0x746 <LCD_write_command+0xc4>
     73a:	41 e0       	ldi	r20, 0x01	; 1
     73c:	65 e0       	ldi	r22, 0x05	; 5
     73e:	83 e0       	ldi	r24, 0x03	; 3
     740:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     744:	05 c0       	rjmp	.+10     	; 0x750 <LCD_write_command+0xce>
     746:	40 e0       	ldi	r20, 0x00	; 0
     748:	65 e0       	ldi	r22, 0x05	; 5
     74a:	83 e0       	ldi	r24, 0x03	; 3
     74c:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     750:	c1 ff       	sbrs	r28, 1
     752:	06 c0       	rjmp	.+12     	; 0x760 <LCD_write_command+0xde>
     754:	41 e0       	ldi	r20, 0x01	; 1
     756:	64 e0       	ldi	r22, 0x04	; 4
     758:	83 e0       	ldi	r24, 0x03	; 3
     75a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     75e:	05 c0       	rjmp	.+10     	; 0x76a <LCD_write_command+0xe8>
     760:	40 e0       	ldi	r20, 0x00	; 0
     762:	64 e0       	ldi	r22, 0x04	; 4
     764:	83 e0       	ldi	r24, 0x03	; 3
     766:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     76a:	c0 ff       	sbrs	r28, 0
     76c:	06 c0       	rjmp	.+12     	; 0x77a <LCD_write_command+0xf8>
     76e:	41 e0       	ldi	r20, 0x01	; 1
     770:	63 e0       	ldi	r22, 0x03	; 3
     772:	83 e0       	ldi	r24, 0x03	; 3
     774:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     778:	05 c0       	rjmp	.+10     	; 0x784 <LCD_write_command+0x102>
     77a:	40 e0       	ldi	r20, 0x00	; 0
     77c:	63 e0       	ldi	r22, 0x03	; 3
     77e:	83 e0       	ldi	r24, 0x03	; 3
     780:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     784:	41 e0       	ldi	r20, 0x01	; 1
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	83 e0       	ldi	r24, 0x03	; 3
     78a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	0e 94 c8 07 	call	0xf90	; 0xf90 <delay_ms>
     796:	40 e0       	ldi	r20, 0x00	; 0
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	83 e0       	ldi	r24, 0x03	; 3
     79c:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0e 94 c8 07 	call	0xf90	; 0xf90 <delay_ms>
     7a8:	cf 91       	pop	r28
     7aa:	08 95       	ret

000007ac <LCD_init>:
     7ac:	41 e0       	ldi	r20, 0x01	; 1
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	83 e0       	ldi	r24, 0x03	; 3
     7b2:	0e 94 5f 05 	call	0xabe	; 0xabe <DIO_init_pin>
     7b6:	41 e0       	ldi	r20, 0x01	; 1
     7b8:	61 e0       	ldi	r22, 0x01	; 1
     7ba:	83 e0       	ldi	r24, 0x03	; 3
     7bc:	0e 94 5f 05 	call	0xabe	; 0xabe <DIO_init_pin>
     7c0:	41 e0       	ldi	r20, 0x01	; 1
     7c2:	63 e0       	ldi	r22, 0x03	; 3
     7c4:	83 e0       	ldi	r24, 0x03	; 3
     7c6:	0e 94 5f 05 	call	0xabe	; 0xabe <DIO_init_pin>
     7ca:	41 e0       	ldi	r20, 0x01	; 1
     7cc:	64 e0       	ldi	r22, 0x04	; 4
     7ce:	83 e0       	ldi	r24, 0x03	; 3
     7d0:	0e 94 5f 05 	call	0xabe	; 0xabe <DIO_init_pin>
     7d4:	41 e0       	ldi	r20, 0x01	; 1
     7d6:	65 e0       	ldi	r22, 0x05	; 5
     7d8:	83 e0       	ldi	r24, 0x03	; 3
     7da:	0e 94 5f 05 	call	0xabe	; 0xabe <DIO_init_pin>
     7de:	41 e0       	ldi	r20, 0x01	; 1
     7e0:	66 e0       	ldi	r22, 0x06	; 6
     7e2:	83 e0       	ldi	r24, 0x03	; 3
     7e4:	0e 94 5f 05 	call	0xabe	; 0xabe <DIO_init_pin>
     7e8:	83 e0       	ldi	r24, 0x03	; 3
     7ea:	0e 94 41 03 	call	0x682	; 0x682 <LCD_write_command>
     7ee:	84 e0       	ldi	r24, 0x04	; 4
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 c8 07 	call	0xf90	; 0xf90 <delay_ms>
     7f6:	83 e0       	ldi	r24, 0x03	; 3
     7f8:	0e 94 41 03 	call	0x682	; 0x682 <LCD_write_command>
     7fc:	84 e0       	ldi	r24, 0x04	; 4
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	0e 94 c8 07 	call	0xf90	; 0xf90 <delay_ms>
     804:	83 e0       	ldi	r24, 0x03	; 3
     806:	0e 94 41 03 	call	0x682	; 0x682 <LCD_write_command>
     80a:	84 e0       	ldi	r24, 0x04	; 4
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 c8 07 	call	0xf90	; 0xf90 <delay_ms>
     812:	82 e0       	ldi	r24, 0x02	; 2
     814:	0e 94 41 03 	call	0x682	; 0x682 <LCD_write_command>
     818:	88 e2       	ldi	r24, 0x28	; 40
     81a:	0e 94 41 03 	call	0x682	; 0x682 <LCD_write_command>
     81e:	88 e0       	ldi	r24, 0x08	; 8
     820:	0e 94 41 03 	call	0x682	; 0x682 <LCD_write_command>
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	0e 94 41 03 	call	0x682	; 0x682 <LCD_write_command>
     82a:	86 e0       	ldi	r24, 0x06	; 6
     82c:	0e 94 41 03 	call	0x682	; 0x682 <LCD_write_command>
     830:	8c e0       	ldi	r24, 0x0C	; 12
     832:	0e 94 41 03 	call	0x682	; 0x682 <LCD_write_command>
     836:	84 e1       	ldi	r24, 0x14	; 20
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	0e 94 c8 07 	call	0xf90	; 0xf90 <delay_ms>
     83e:	08 95       	ret

00000840 <LCD_write_data>:
     840:	cf 93       	push	r28
     842:	c8 2f       	mov	r28, r24
     844:	41 e0       	ldi	r20, 0x01	; 1
     846:	61 e0       	ldi	r22, 0x01	; 1
     848:	83 e0       	ldi	r24, 0x03	; 3
     84a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     84e:	cc 23       	and	r28, r28
     850:	34 f4       	brge	.+12     	; 0x85e <LCD_write_data+0x1e>
     852:	41 e0       	ldi	r20, 0x01	; 1
     854:	66 e0       	ldi	r22, 0x06	; 6
     856:	83 e0       	ldi	r24, 0x03	; 3
     858:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     85c:	05 c0       	rjmp	.+10     	; 0x868 <__stack+0x9>
     85e:	40 e0       	ldi	r20, 0x00	; 0
     860:	66 e0       	ldi	r22, 0x06	; 6
     862:	83 e0       	ldi	r24, 0x03	; 3
     864:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     868:	c6 ff       	sbrs	r28, 6
     86a:	06 c0       	rjmp	.+12     	; 0x878 <__stack+0x19>
     86c:	41 e0       	ldi	r20, 0x01	; 1
     86e:	65 e0       	ldi	r22, 0x05	; 5
     870:	83 e0       	ldi	r24, 0x03	; 3
     872:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     876:	05 c0       	rjmp	.+10     	; 0x882 <__stack+0x23>
     878:	40 e0       	ldi	r20, 0x00	; 0
     87a:	65 e0       	ldi	r22, 0x05	; 5
     87c:	83 e0       	ldi	r24, 0x03	; 3
     87e:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     882:	c5 ff       	sbrs	r28, 5
     884:	06 c0       	rjmp	.+12     	; 0x892 <__stack+0x33>
     886:	41 e0       	ldi	r20, 0x01	; 1
     888:	64 e0       	ldi	r22, 0x04	; 4
     88a:	83 e0       	ldi	r24, 0x03	; 3
     88c:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     890:	05 c0       	rjmp	.+10     	; 0x89c <__stack+0x3d>
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	64 e0       	ldi	r22, 0x04	; 4
     896:	83 e0       	ldi	r24, 0x03	; 3
     898:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     89c:	c4 ff       	sbrs	r28, 4
     89e:	06 c0       	rjmp	.+12     	; 0x8ac <__stack+0x4d>
     8a0:	41 e0       	ldi	r20, 0x01	; 1
     8a2:	63 e0       	ldi	r22, 0x03	; 3
     8a4:	83 e0       	ldi	r24, 0x03	; 3
     8a6:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     8aa:	05 c0       	rjmp	.+10     	; 0x8b6 <__stack+0x57>
     8ac:	40 e0       	ldi	r20, 0x00	; 0
     8ae:	63 e0       	ldi	r22, 0x03	; 3
     8b0:	83 e0       	ldi	r24, 0x03	; 3
     8b2:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     8b6:	41 e0       	ldi	r20, 0x01	; 1
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 c8 07 	call	0xf90	; 0xf90 <delay_ms>
     8c8:	40 e0       	ldi	r20, 0x00	; 0
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	83 e0       	ldi	r24, 0x03	; 3
     8ce:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	0e 94 c8 07 	call	0xf90	; 0xf90 <delay_ms>
     8da:	c3 ff       	sbrs	r28, 3
     8dc:	06 c0       	rjmp	.+12     	; 0x8ea <__stack+0x8b>
     8de:	41 e0       	ldi	r20, 0x01	; 1
     8e0:	66 e0       	ldi	r22, 0x06	; 6
     8e2:	83 e0       	ldi	r24, 0x03	; 3
     8e4:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     8e8:	05 c0       	rjmp	.+10     	; 0x8f4 <__stack+0x95>
     8ea:	40 e0       	ldi	r20, 0x00	; 0
     8ec:	66 e0       	ldi	r22, 0x06	; 6
     8ee:	83 e0       	ldi	r24, 0x03	; 3
     8f0:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     8f4:	c2 ff       	sbrs	r28, 2
     8f6:	06 c0       	rjmp	.+12     	; 0x904 <__stack+0xa5>
     8f8:	41 e0       	ldi	r20, 0x01	; 1
     8fa:	65 e0       	ldi	r22, 0x05	; 5
     8fc:	83 e0       	ldi	r24, 0x03	; 3
     8fe:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     902:	05 c0       	rjmp	.+10     	; 0x90e <__stack+0xaf>
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	65 e0       	ldi	r22, 0x05	; 5
     908:	83 e0       	ldi	r24, 0x03	; 3
     90a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     90e:	c1 ff       	sbrs	r28, 1
     910:	06 c0       	rjmp	.+12     	; 0x91e <__stack+0xbf>
     912:	41 e0       	ldi	r20, 0x01	; 1
     914:	64 e0       	ldi	r22, 0x04	; 4
     916:	83 e0       	ldi	r24, 0x03	; 3
     918:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     91c:	05 c0       	rjmp	.+10     	; 0x928 <__stack+0xc9>
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	64 e0       	ldi	r22, 0x04	; 4
     922:	83 e0       	ldi	r24, 0x03	; 3
     924:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     928:	c0 ff       	sbrs	r28, 0
     92a:	06 c0       	rjmp	.+12     	; 0x938 <__stack+0xd9>
     92c:	41 e0       	ldi	r20, 0x01	; 1
     92e:	63 e0       	ldi	r22, 0x03	; 3
     930:	83 e0       	ldi	r24, 0x03	; 3
     932:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     936:	05 c0       	rjmp	.+10     	; 0x942 <__stack+0xe3>
     938:	40 e0       	ldi	r20, 0x00	; 0
     93a:	63 e0       	ldi	r22, 0x03	; 3
     93c:	83 e0       	ldi	r24, 0x03	; 3
     93e:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     942:	41 e0       	ldi	r20, 0x01	; 1
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	83 e0       	ldi	r24, 0x03	; 3
     948:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 c8 07 	call	0xf90	; 0xf90 <delay_ms>
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	83 e0       	ldi	r24, 0x03	; 3
     95a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	0e 94 c8 07 	call	0xf90	; 0xf90 <delay_ms>
     966:	cf 91       	pop	r28
     968:	08 95       	ret

0000096a <LCD_write_number>:


void LCD_write_number(sint32_t num){
     96a:	cf 92       	push	r12
     96c:	df 92       	push	r13
     96e:	ef 92       	push	r14
     970:	ff 92       	push	r15
     972:	1f 93       	push	r17
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	cd b7       	in	r28, 0x3d	; 61
     97a:	de b7       	in	r29, 0x3e	; 62
     97c:	2a 97       	sbiw	r28, 0x0a	; 10
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	f8 94       	cli
     982:	de bf       	out	0x3e, r29	; 62
     984:	0f be       	out	0x3f, r0	; 63
     986:	cd bf       	out	0x3d, r28	; 61
     988:	6b 01       	movw	r12, r22
     98a:	7c 01       	movw	r14, r24
	uint8_t num_arr[10];
	sint8_t i = 0;
	
	if (num < 0)
     98c:	99 23       	and	r25, r25
     98e:	5c f4       	brge	.+22     	; 0x9a6 <LCD_write_number+0x3c>
	{
		LCD_write_data('-');
     990:	8d e2       	ldi	r24, 0x2D	; 45
     992:	0e 94 20 04 	call	0x840	; 0x840 <LCD_write_data>
		num = num * -1;
     996:	f0 94       	com	r15
     998:	e0 94       	com	r14
     99a:	d0 94       	com	r13
     99c:	c0 94       	com	r12
     99e:	c1 1c       	adc	r12, r1
     9a0:	d1 1c       	adc	r13, r1
     9a2:	e1 1c       	adc	r14, r1
     9a4:	f1 1c       	adc	r15, r1
	}
	
	if (num == 0)
     9a6:	c1 14       	cp	r12, r1
     9a8:	d1 04       	cpc	r13, r1
     9aa:	e1 04       	cpc	r14, r1
     9ac:	f1 04       	cpc	r15, r1
     9ae:	e1 f4       	brne	.+56     	; 0x9e8 <LCD_write_number+0x7e>
	{
		LCD_write_data('0');
     9b0:	80 e3       	ldi	r24, 0x30	; 48
     9b2:	0e 94 20 04 	call	0x840	; 0x840 <LCD_write_data>
     9b6:	30 c0       	rjmp	.+96     	; 0xa18 <LCD_write_number+0xae>
	// Splitting digits
	for (i = 0; num != 0; i++)
	{
		// Adding 48 to write the ASCII value of the number
		// Because LCD only write ASCII
		num_arr[i] = (num % 10) + 48;
     9b8:	c7 01       	movw	r24, r14
     9ba:	b6 01       	movw	r22, r12
     9bc:	2a e0       	ldi	r18, 0x0A	; 10
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	40 e0       	ldi	r20, 0x00	; 0
     9c2:	50 e0       	ldi	r21, 0x00	; 0
     9c4:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__divmodsi4>
     9c8:	e1 e0       	ldi	r30, 0x01	; 1
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	ec 0f       	add	r30, r28
     9ce:	fd 1f       	adc	r31, r29
     9d0:	e1 0f       	add	r30, r17
     9d2:	f1 1d       	adc	r31, r1
     9d4:	17 fd       	sbrc	r17, 7
     9d6:	fa 95       	dec	r31
     9d8:	60 5d       	subi	r22, 0xD0	; 208
     9da:	60 83       	st	Z, r22
		num /= 10;
     9dc:	c2 2e       	mov	r12, r18
     9de:	d3 2e       	mov	r13, r19
     9e0:	e4 2e       	mov	r14, r20
     9e2:	f5 2e       	mov	r15, r21
		LCD_write_data('0');
		return;
	}
	
	// Splitting digits
	for (i = 0; num != 0; i++)
     9e4:	1f 5f       	subi	r17, 0xFF	; 255
     9e6:	01 c0       	rjmp	.+2      	; 0x9ea <LCD_write_number+0x80>
     9e8:	10 e0       	ldi	r17, 0x00	; 0
     9ea:	c1 14       	cp	r12, r1
     9ec:	d1 04       	cpc	r13, r1
     9ee:	e1 04       	cpc	r14, r1
     9f0:	f1 04       	cpc	r15, r1
     9f2:	11 f7       	brne	.-60     	; 0x9b8 <LCD_write_number+0x4e>
		// Adding 48 to write the ASCII value of the number
		// Because LCD only write ASCII
		num_arr[i] = (num % 10) + 48;
		num /= 10;
	}
	i--;
     9f4:	ff 24       	eor	r15, r15
     9f6:	fa 94       	dec	r15
     9f8:	f1 0e       	add	r15, r17
	
	while(i >= 0)
     9fa:	0c c0       	rjmp	.+24     	; 0xa14 <LCD_write_number+0xaa>
	{
		LCD_write_data(num_arr[i]);
     9fc:	e1 e0       	ldi	r30, 0x01	; 1
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	ec 0f       	add	r30, r28
     a02:	fd 1f       	adc	r31, r29
     a04:	ef 0d       	add	r30, r15
     a06:	f1 1d       	adc	r31, r1
     a08:	f7 fc       	sbrc	r15, 7
     a0a:	fa 95       	dec	r31
     a0c:	80 81       	ld	r24, Z
     a0e:	0e 94 20 04 	call	0x840	; 0x840 <LCD_write_data>
		i--;
     a12:	fa 94       	dec	r15
		num_arr[i] = (num % 10) + 48;
		num /= 10;
	}
	i--;
	
	while(i >= 0)
     a14:	ff 20       	and	r15, r15
     a16:	94 f7       	brge	.-28     	; 0x9fc <LCD_write_number+0x92>
	{
		LCD_write_data(num_arr[i]);
		i--;
	}
	
     a18:	2a 96       	adiw	r28, 0x0a	; 10
     a1a:	0f b6       	in	r0, 0x3f	; 63
     a1c:	f8 94       	cli
     a1e:	de bf       	out	0x3e, r29	; 62
     a20:	0f be       	out	0x3f, r0	; 63
     a22:	cd bf       	out	0x3d, r28	; 61
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	1f 91       	pop	r17
     a2a:	ff 90       	pop	r15
     a2c:	ef 90       	pop	r14
     a2e:	df 90       	pop	r13
     a30:	cf 90       	pop	r12
     a32:	08 95       	ret

00000a34 <SEVEN_SEG_init_enables>:
* Purpose      : Initialize enable pins as output
* Parameters   : Void
* Return value : Void
*****************************************************************************/
void SEVEN_SEG_init_enables(void){
	DIO_init_pin(PORTA_t, PIN0_t, OUTPUT);
     a34:	41 e0       	ldi	r20, 0x01	; 1
     a36:	60 e0       	ldi	r22, 0x00	; 0
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	0e 94 5f 05 	call	0xabe	; 0xabe <DIO_init_pin>
	DIO_init_pin(PORTA_t, PIN1_t, OUTPUT);
     a3e:	41 e0       	ldi	r20, 0x01	; 1
     a40:	61 e0       	ldi	r22, 0x01	; 1
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	0e 94 5f 05 	call	0xabe	; 0xabe <DIO_init_pin>
	DIO_init_pin(PORTA_t, PIN2_t, OUTPUT);
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	62 e0       	ldi	r22, 0x02	; 2
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	0e 94 5f 05 	call	0xabe	; 0xabe <DIO_init_pin>
	DIO_init_pin(PORTA_t, PIN3_t, OUTPUT);
     a52:	41 e0       	ldi	r20, 0x01	; 1
     a54:	63 e0       	ldi	r22, 0x03	; 3
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	0e 94 5f 05 	call	0xabe	; 0xabe <DIO_init_pin>
	DIO_init_pin(PORTA_t, PIN4_t, OUTPUT);
     a5c:	41 e0       	ldi	r20, 0x01	; 1
     a5e:	64 e0       	ldi	r22, 0x04	; 4
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	0e 94 5f 05 	call	0xabe	; 0xabe <DIO_init_pin>
	DIO_init_pin(PORTA_t, PIN5_t, OUTPUT);
     a66:	41 e0       	ldi	r20, 0x01	; 1
     a68:	65 e0       	ldi	r22, 0x05	; 5
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	0e 94 5f 05 	call	0xabe	; 0xabe <DIO_init_pin>
     a70:	08 95       	ret

00000a72 <SEVEN_SEG_init>:
* Purpose      : Initialize seven segment
* Parameters   : Void
* Return value : Void
*****************************************************************************/
void SEVEN_SEG_init(void){
	DIO_init_port(PORTC_t, OUTPUT);
     a72:	61 e0       	ldi	r22, 0x01	; 1
     a74:	82 e0       	ldi	r24, 0x02	; 2
     a76:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_init_port>
	SEVEN_SEG_init_enables();
     a7a:	0e 94 1a 05 	call	0xa34	; 0xa34 <SEVEN_SEG_init_enables>
     a7e:	08 95       	ret

00000a80 <SEVEN_SEG_write_digit>:
* Function Name: SEVEN_SEG_write_digit
* Purpose      : Writes a digit on a seven segment
* Parameters   : Seven segment select and digit to be displayed
* Return value : Void
*****************************************************************************/
void SEVEN_SEG_write_digit(SEG_select_t select, uint8_t digit){
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
     a84:	d8 2f       	mov	r29, r24
     a86:	c6 2f       	mov	r28, r22
	DIO_write_port(PORTA_t, 0);
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <DIO_write_port>
	DIO_write(PORTA_t, select, HIGH);
     a90:	41 e0       	ldi	r20, 0x01	; 1
     a92:	6d 2f       	mov	r22, r29
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <DIO_write>
	DIO_write_port(PORTC_t, seg_decoder[digit]);
     a9a:	ec 2f       	mov	r30, r28
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	ed 59       	subi	r30, 0x9D	; 157
     aa0:	ff 4f       	sbci	r31, 0xFF	; 255
     aa2:	60 81       	ld	r22, Z
     aa4:	82 e0       	ldi	r24, 0x02	; 2
     aa6:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <DIO_write_port>
}
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	08 95       	ret

00000ab0 <main>:
#include "APPLICATION/APP.h"


int main(void)
{
	APP_init();
     ab0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <APP_init>
	APP_loop();
     ab4:	0e 94 15 01 	call	0x22a	; 0x22a <APP_loop>
}
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	08 95       	ret

00000abe <DIO_init_pin>:
		case PORTC_t:
		TOGBIT(PORTC,pin);
		break;
		
		case PORTD_t:
		TOGBIT(PORTD,pin);
     abe:	44 23       	and	r20, r20
     ac0:	19 f0       	breq	.+6      	; 0xac8 <DIO_init_pin+0xa>
     ac2:	41 30       	cpi	r20, 0x01	; 1
     ac4:	c9 f1       	breq	.+114    	; 0xb38 <DIO_init_pin+0x7a>
     ac6:	08 95       	ret
     ac8:	81 30       	cpi	r24, 0x01	; 1
     aca:	91 f0       	breq	.+36     	; 0xaf0 <DIO_init_pin+0x32>
     acc:	28 f0       	brcs	.+10     	; 0xad8 <DIO_init_pin+0x1a>
     ace:	82 30       	cpi	r24, 0x02	; 2
     ad0:	d9 f0       	breq	.+54     	; 0xb08 <DIO_init_pin+0x4a>
     ad2:	83 30       	cpi	r24, 0x03	; 3
     ad4:	29 f1       	breq	.+74     	; 0xb20 <DIO_init_pin+0x62>
     ad6:	08 95       	ret
     ad8:	2a b3       	in	r18, 0x1a	; 26
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <DIO_init_pin+0x26>
     ae0:	88 0f       	add	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	6a 95       	dec	r22
     ae6:	e2 f7       	brpl	.-8      	; 0xae0 <DIO_init_pin+0x22>
     ae8:	80 95       	com	r24
     aea:	82 23       	and	r24, r18
     aec:	8a bb       	out	0x1a, r24	; 26
     aee:	08 95       	ret
     af0:	27 b3       	in	r18, 0x17	; 23
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	02 c0       	rjmp	.+4      	; 0xafc <DIO_init_pin+0x3e>
     af8:	88 0f       	add	r24, r24
     afa:	99 1f       	adc	r25, r25
     afc:	6a 95       	dec	r22
     afe:	e2 f7       	brpl	.-8      	; 0xaf8 <DIO_init_pin+0x3a>
     b00:	80 95       	com	r24
     b02:	82 23       	and	r24, r18
     b04:	87 bb       	out	0x17, r24	; 23
     b06:	08 95       	ret
     b08:	24 b3       	in	r18, 0x14	; 20
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <DIO_init_pin+0x56>
     b10:	88 0f       	add	r24, r24
     b12:	99 1f       	adc	r25, r25
     b14:	6a 95       	dec	r22
     b16:	e2 f7       	brpl	.-8      	; 0xb10 <DIO_init_pin+0x52>
     b18:	80 95       	com	r24
     b1a:	82 23       	and	r24, r18
     b1c:	84 bb       	out	0x14, r24	; 20
     b1e:	08 95       	ret
     b20:	21 b3       	in	r18, 0x11	; 17
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	02 c0       	rjmp	.+4      	; 0xb2c <DIO_init_pin+0x6e>
     b28:	88 0f       	add	r24, r24
     b2a:	99 1f       	adc	r25, r25
     b2c:	6a 95       	dec	r22
     b2e:	e2 f7       	brpl	.-8      	; 0xb28 <DIO_init_pin+0x6a>
     b30:	80 95       	com	r24
     b32:	82 23       	and	r24, r18
     b34:	81 bb       	out	0x11, r24	; 17
     b36:	08 95       	ret
     b38:	81 30       	cpi	r24, 0x01	; 1
     b3a:	89 f0       	breq	.+34     	; 0xb5e <DIO_init_pin+0xa0>
     b3c:	28 f0       	brcs	.+10     	; 0xb48 <DIO_init_pin+0x8a>
     b3e:	82 30       	cpi	r24, 0x02	; 2
     b40:	c9 f0       	breq	.+50     	; 0xb74 <DIO_init_pin+0xb6>
     b42:	83 30       	cpi	r24, 0x03	; 3
     b44:	11 f1       	breq	.+68     	; 0xb8a <DIO_init_pin+0xcc>
     b46:	08 95       	ret
     b48:	2a b3       	in	r18, 0x1a	; 26
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	02 c0       	rjmp	.+4      	; 0xb54 <DIO_init_pin+0x96>
     b50:	88 0f       	add	r24, r24
     b52:	99 1f       	adc	r25, r25
     b54:	6a 95       	dec	r22
     b56:	e2 f7       	brpl	.-8      	; 0xb50 <DIO_init_pin+0x92>
     b58:	82 2b       	or	r24, r18
     b5a:	8a bb       	out	0x1a, r24	; 26
     b5c:	08 95       	ret
     b5e:	27 b3       	in	r18, 0x17	; 23
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	02 c0       	rjmp	.+4      	; 0xb6a <DIO_init_pin+0xac>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	6a 95       	dec	r22
     b6c:	e2 f7       	brpl	.-8      	; 0xb66 <DIO_init_pin+0xa8>
     b6e:	82 2b       	or	r24, r18
     b70:	87 bb       	out	0x17, r24	; 23
     b72:	08 95       	ret
     b74:	24 b3       	in	r18, 0x14	; 20
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <DIO_init_pin+0xc2>
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	6a 95       	dec	r22
     b82:	e2 f7       	brpl	.-8      	; 0xb7c <DIO_init_pin+0xbe>
     b84:	82 2b       	or	r24, r18
     b86:	84 bb       	out	0x14, r24	; 20
     b88:	08 95       	ret
     b8a:	21 b3       	in	r18, 0x11	; 17
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <DIO_init_pin+0xd8>
     b92:	88 0f       	add	r24, r24
     b94:	99 1f       	adc	r25, r25
     b96:	6a 95       	dec	r22
     b98:	e2 f7       	brpl	.-8      	; 0xb92 <DIO_init_pin+0xd4>
     b9a:	82 2b       	or	r24, r18
     b9c:	81 bb       	out	0x11, r24	; 17
     b9e:	08 95       	ret

00000ba0 <DIO_init_port>:
     ba0:	66 23       	and	r22, r22
     ba2:	19 f0       	breq	.+6      	; 0xbaa <DIO_init_port+0xa>
     ba4:	61 30       	cpi	r22, 0x01	; 1
     ba6:	89 f0       	breq	.+34     	; 0xbca <DIO_init_port+0x2a>
     ba8:	08 95       	ret
     baa:	81 30       	cpi	r24, 0x01	; 1
     bac:	41 f0       	breq	.+16     	; 0xbbe <DIO_init_port+0x1e>
     bae:	28 f0       	brcs	.+10     	; 0xbba <DIO_init_port+0x1a>
     bb0:	82 30       	cpi	r24, 0x02	; 2
     bb2:	39 f0       	breq	.+14     	; 0xbc2 <DIO_init_port+0x22>
     bb4:	83 30       	cpi	r24, 0x03	; 3
     bb6:	39 f0       	breq	.+14     	; 0xbc6 <DIO_init_port+0x26>
     bb8:	08 95       	ret
     bba:	1a ba       	out	0x1a, r1	; 26
     bbc:	08 95       	ret
     bbe:	17 ba       	out	0x17, r1	; 23
     bc0:	08 95       	ret
     bc2:	14 ba       	out	0x14, r1	; 20
     bc4:	08 95       	ret
     bc6:	11 ba       	out	0x11, r1	; 17
     bc8:	08 95       	ret
     bca:	81 30       	cpi	r24, 0x01	; 1
     bcc:	49 f0       	breq	.+18     	; 0xbe0 <DIO_init_port+0x40>
     bce:	28 f0       	brcs	.+10     	; 0xbda <DIO_init_port+0x3a>
     bd0:	82 30       	cpi	r24, 0x02	; 2
     bd2:	49 f0       	breq	.+18     	; 0xbe6 <DIO_init_port+0x46>
     bd4:	83 30       	cpi	r24, 0x03	; 3
     bd6:	51 f0       	breq	.+20     	; 0xbec <DIO_init_port+0x4c>
     bd8:	08 95       	ret
     bda:	8f ef       	ldi	r24, 0xFF	; 255
     bdc:	8a bb       	out	0x1a, r24	; 26
     bde:	08 95       	ret
     be0:	8f ef       	ldi	r24, 0xFF	; 255
     be2:	87 bb       	out	0x17, r24	; 23
     be4:	08 95       	ret
     be6:	8f ef       	ldi	r24, 0xFF	; 255
     be8:	84 bb       	out	0x14, r24	; 20
     bea:	08 95       	ret
     bec:	8f ef       	ldi	r24, 0xFF	; 255
     bee:	81 bb       	out	0x11, r24	; 17
     bf0:	08 95       	ret

00000bf2 <DIO_write>:
     bf2:	44 23       	and	r20, r20
     bf4:	19 f0       	breq	.+6      	; 0xbfc <DIO_write+0xa>
     bf6:	41 30       	cpi	r20, 0x01	; 1
     bf8:	c9 f1       	breq	.+114    	; 0xc6c <DIO_write+0x7a>
     bfa:	08 95       	ret
     bfc:	81 30       	cpi	r24, 0x01	; 1
     bfe:	91 f0       	breq	.+36     	; 0xc24 <DIO_write+0x32>
     c00:	28 f0       	brcs	.+10     	; 0xc0c <DIO_write+0x1a>
     c02:	82 30       	cpi	r24, 0x02	; 2
     c04:	d9 f0       	breq	.+54     	; 0xc3c <DIO_write+0x4a>
     c06:	83 30       	cpi	r24, 0x03	; 3
     c08:	29 f1       	breq	.+74     	; 0xc54 <DIO_write+0x62>
     c0a:	08 95       	ret
     c0c:	2b b3       	in	r18, 0x1b	; 27
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	02 c0       	rjmp	.+4      	; 0xc18 <DIO_write+0x26>
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	6a 95       	dec	r22
     c1a:	e2 f7       	brpl	.-8      	; 0xc14 <DIO_write+0x22>
     c1c:	80 95       	com	r24
     c1e:	82 23       	and	r24, r18
     c20:	8b bb       	out	0x1b, r24	; 27
     c22:	08 95       	ret
     c24:	28 b3       	in	r18, 0x18	; 24
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <DIO_write+0x3e>
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	6a 95       	dec	r22
     c32:	e2 f7       	brpl	.-8      	; 0xc2c <DIO_write+0x3a>
     c34:	80 95       	com	r24
     c36:	82 23       	and	r24, r18
     c38:	88 bb       	out	0x18, r24	; 24
     c3a:	08 95       	ret
     c3c:	25 b3       	in	r18, 0x15	; 21
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	02 c0       	rjmp	.+4      	; 0xc48 <DIO_write+0x56>
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	6a 95       	dec	r22
     c4a:	e2 f7       	brpl	.-8      	; 0xc44 <DIO_write+0x52>
     c4c:	80 95       	com	r24
     c4e:	82 23       	and	r24, r18
     c50:	85 bb       	out	0x15, r24	; 21
     c52:	08 95       	ret
     c54:	22 b3       	in	r18, 0x12	; 18
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <DIO_write+0x6e>
     c5c:	88 0f       	add	r24, r24
     c5e:	99 1f       	adc	r25, r25
     c60:	6a 95       	dec	r22
     c62:	e2 f7       	brpl	.-8      	; 0xc5c <DIO_write+0x6a>
     c64:	80 95       	com	r24
     c66:	82 23       	and	r24, r18
     c68:	82 bb       	out	0x12, r24	; 18
     c6a:	08 95       	ret
     c6c:	81 30       	cpi	r24, 0x01	; 1
     c6e:	89 f0       	breq	.+34     	; 0xc92 <DIO_write+0xa0>
     c70:	28 f0       	brcs	.+10     	; 0xc7c <DIO_write+0x8a>
     c72:	82 30       	cpi	r24, 0x02	; 2
     c74:	c9 f0       	breq	.+50     	; 0xca8 <DIO_write+0xb6>
     c76:	83 30       	cpi	r24, 0x03	; 3
     c78:	11 f1       	breq	.+68     	; 0xcbe <DIO_write+0xcc>
     c7a:	08 95       	ret
     c7c:	2b b3       	in	r18, 0x1b	; 27
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <DIO_write+0x96>
     c84:	88 0f       	add	r24, r24
     c86:	99 1f       	adc	r25, r25
     c88:	6a 95       	dec	r22
     c8a:	e2 f7       	brpl	.-8      	; 0xc84 <DIO_write+0x92>
     c8c:	82 2b       	or	r24, r18
     c8e:	8b bb       	out	0x1b, r24	; 27
     c90:	08 95       	ret
     c92:	28 b3       	in	r18, 0x18	; 24
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <DIO_write+0xac>
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	6a 95       	dec	r22
     ca0:	e2 f7       	brpl	.-8      	; 0xc9a <DIO_write+0xa8>
     ca2:	82 2b       	or	r24, r18
     ca4:	88 bb       	out	0x18, r24	; 24
     ca6:	08 95       	ret
     ca8:	25 b3       	in	r18, 0x15	; 21
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <DIO_write+0xc2>
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	6a 95       	dec	r22
     cb6:	e2 f7       	brpl	.-8      	; 0xcb0 <DIO_write+0xbe>
     cb8:	82 2b       	or	r24, r18
     cba:	85 bb       	out	0x15, r24	; 21
     cbc:	08 95       	ret
     cbe:	22 b3       	in	r18, 0x12	; 18
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <DIO_write+0xd8>
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	6a 95       	dec	r22
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <DIO_write+0xd4>
     cce:	82 2b       	or	r24, r18
     cd0:	82 bb       	out	0x12, r24	; 18
     cd2:	08 95       	ret

00000cd4 <DIO_write_port>:
     cd4:	81 30       	cpi	r24, 0x01	; 1
     cd6:	41 f0       	breq	.+16     	; 0xce8 <DIO_write_port+0x14>
     cd8:	28 f0       	brcs	.+10     	; 0xce4 <DIO_write_port+0x10>
     cda:	82 30       	cpi	r24, 0x02	; 2
     cdc:	39 f0       	breq	.+14     	; 0xcec <DIO_write_port+0x18>
     cde:	83 30       	cpi	r24, 0x03	; 3
     ce0:	39 f0       	breq	.+14     	; 0xcf0 <DIO_write_port+0x1c>
     ce2:	08 95       	ret
     ce4:	6b bb       	out	0x1b, r22	; 27
     ce6:	08 95       	ret
     ce8:	68 bb       	out	0x18, r22	; 24
     cea:	08 95       	ret
     cec:	65 bb       	out	0x15, r22	; 21
     cee:	08 95       	ret
     cf0:	62 bb       	out	0x12, r22	; 18
     cf2:	08 95       	ret

00000cf4 <DIO_read>:
* Purpose      : Reads the value on a specific pin in a specific port
* Parameters   : Register name and pin number
* Return value : Pin value (uint8_t) 0 or 1
*****************************************************************************/
PIN_value_t DIO_read(REG_name_t reg, PIN_num_t pin){
	switch (reg)
     cf4:	81 30       	cpi	r24, 0x01	; 1
     cf6:	79 f0       	breq	.+30     	; 0xd16 <DIO_read+0x22>
     cf8:	28 f0       	brcs	.+10     	; 0xd04 <DIO_read+0x10>
     cfa:	82 30       	cpi	r24, 0x02	; 2
     cfc:	a9 f0       	breq	.+42     	; 0xd28 <DIO_read+0x34>
     cfe:	83 30       	cpi	r24, 0x03	; 3
     d00:	e1 f0       	breq	.+56     	; 0xd3a <DIO_read+0x46>
     d02:	24 c0       	rjmp	.+72     	; 0xd4c <DIO_read+0x58>
	{
		case PORTA_t:
		return READBIT(PINA,pin);
     d04:	89 b3       	in	r24, 0x19	; 25
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <DIO_read+0x1a>
     d0a:	95 95       	asr	r25
     d0c:	87 95       	ror	r24
     d0e:	6a 95       	dec	r22
     d10:	e2 f7       	brpl	.-8      	; 0xd0a <DIO_read+0x16>
     d12:	81 70       	andi	r24, 0x01	; 1
     d14:	08 95       	ret
		
		case PORTB_t:
		return READBIT(PINB,pin);
     d16:	86 b3       	in	r24, 0x16	; 22
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <DIO_read+0x2c>
     d1c:	95 95       	asr	r25
     d1e:	87 95       	ror	r24
     d20:	6a 95       	dec	r22
     d22:	e2 f7       	brpl	.-8      	; 0xd1c <DIO_read+0x28>
     d24:	81 70       	andi	r24, 0x01	; 1
     d26:	08 95       	ret
		
		case PORTC_t:
		return READBIT(PINC,pin);
     d28:	83 b3       	in	r24, 0x13	; 19
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <DIO_read+0x3e>
     d2e:	95 95       	asr	r25
     d30:	87 95       	ror	r24
     d32:	6a 95       	dec	r22
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <DIO_read+0x3a>
     d36:	81 70       	andi	r24, 0x01	; 1
     d38:	08 95       	ret
		
		case PORTD_t:
		return READBIT(PIND,pin);
     d3a:	80 b3       	in	r24, 0x10	; 16
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <DIO_read+0x50>
     d40:	95 95       	asr	r25
     d42:	87 95       	ror	r24
     d44:	6a 95       	dec	r22
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <DIO_read+0x4c>
     d48:	81 70       	andi	r24, 0x01	; 1
     d4a:	08 95       	ret
	}
	
	return 0;
     d4c:	80 e0       	ldi	r24, 0x00	; 0
}
     d4e:	08 95       	ret

00000d50 <__vector_1>:
* Function Name: ISR of INT0
* Purpose      : Call the function passed to be executed when INT0 is on
* Parameters   : INT0 isr address
* Return value : Void
*****************************************************************************/
ISR(INT0_vect){
     d50:	1f 92       	push	r1
     d52:	0f 92       	push	r0
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	0f 92       	push	r0
     d58:	11 24       	eor	r1, r1
     d5a:	2f 93       	push	r18
     d5c:	3f 93       	push	r19
     d5e:	4f 93       	push	r20
     d60:	5f 93       	push	r21
     d62:	6f 93       	push	r22
     d64:	7f 93       	push	r23
     d66:	8f 93       	push	r24
     d68:	9f 93       	push	r25
     d6a:	af 93       	push	r26
     d6c:	bf 93       	push	r27
     d6e:	ef 93       	push	r30
     d70:	ff 93       	push	r31
	if (INT0_Fptr != NULLPTR)
     d72:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <INT0_Fptr>
     d76:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <INT0_Fptr+0x1>
     d7a:	30 97       	sbiw	r30, 0x00	; 0
     d7c:	09 f0       	breq	.+2      	; 0xd80 <__vector_1+0x30>
	{
		INT0_Fptr();
     d7e:	09 95       	icall
	}
}
     d80:	ff 91       	pop	r31
     d82:	ef 91       	pop	r30
     d84:	bf 91       	pop	r27
     d86:	af 91       	pop	r26
     d88:	9f 91       	pop	r25
     d8a:	8f 91       	pop	r24
     d8c:	7f 91       	pop	r23
     d8e:	6f 91       	pop	r22
     d90:	5f 91       	pop	r21
     d92:	4f 91       	pop	r20
     d94:	3f 91       	pop	r19
     d96:	2f 91       	pop	r18
     d98:	0f 90       	pop	r0
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	0f 90       	pop	r0
     d9e:	1f 90       	pop	r1
     da0:	18 95       	reti

00000da2 <__vector_2>:
* Function Name: ISR of INT1
* Purpose      : Call the function passed to be executed when INT1 is on
* Parameters   : INT1 isr address
* Return value : Void
*****************************************************************************/
ISR(INT1_vect){
     da2:	1f 92       	push	r1
     da4:	0f 92       	push	r0
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	0f 92       	push	r0
     daa:	11 24       	eor	r1, r1
     dac:	2f 93       	push	r18
     dae:	3f 93       	push	r19
     db0:	4f 93       	push	r20
     db2:	5f 93       	push	r21
     db4:	6f 93       	push	r22
     db6:	7f 93       	push	r23
     db8:	8f 93       	push	r24
     dba:	9f 93       	push	r25
     dbc:	af 93       	push	r26
     dbe:	bf 93       	push	r27
     dc0:	ef 93       	push	r30
     dc2:	ff 93       	push	r31
	if (INT1_Fptr != NULLPTR)
     dc4:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <INT1_Fptr>
     dc8:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <INT1_Fptr+0x1>
     dcc:	30 97       	sbiw	r30, 0x00	; 0
     dce:	09 f0       	breq	.+2      	; 0xdd2 <__vector_2+0x30>
	{
		INT1_Fptr();
     dd0:	09 95       	icall
	}
}
     dd2:	ff 91       	pop	r31
     dd4:	ef 91       	pop	r30
     dd6:	bf 91       	pop	r27
     dd8:	af 91       	pop	r26
     dda:	9f 91       	pop	r25
     ddc:	8f 91       	pop	r24
     dde:	7f 91       	pop	r23
     de0:	6f 91       	pop	r22
     de2:	5f 91       	pop	r21
     de4:	4f 91       	pop	r20
     de6:	3f 91       	pop	r19
     de8:	2f 91       	pop	r18
     dea:	0f 90       	pop	r0
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	0f 90       	pop	r0
     df0:	1f 90       	pop	r1
     df2:	18 95       	reti

00000df4 <__vector_3>:
* Function Name: ISR of INT2
* Purpose      : Call the function passed to be executed when INT2 is on
* Parameters   : INT2 isr address
* Return value : Void
*****************************************************************************/
ISR(INT2_vect){
     df4:	1f 92       	push	r1
     df6:	0f 92       	push	r0
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	0f 92       	push	r0
     dfc:	11 24       	eor	r1, r1
     dfe:	2f 93       	push	r18
     e00:	3f 93       	push	r19
     e02:	4f 93       	push	r20
     e04:	5f 93       	push	r21
     e06:	6f 93       	push	r22
     e08:	7f 93       	push	r23
     e0a:	8f 93       	push	r24
     e0c:	9f 93       	push	r25
     e0e:	af 93       	push	r26
     e10:	bf 93       	push	r27
     e12:	ef 93       	push	r30
     e14:	ff 93       	push	r31
	if (INT2_Fptr != NULLPTR)
     e16:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <INT2_Fptr>
     e1a:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <INT2_Fptr+0x1>
     e1e:	30 97       	sbiw	r30, 0x00	; 0
     e20:	09 f0       	breq	.+2      	; 0xe24 <__vector_3+0x30>
	{
		INT2_Fptr();
     e22:	09 95       	icall
	}
     e24:	ff 91       	pop	r31
     e26:	ef 91       	pop	r30
     e28:	bf 91       	pop	r27
     e2a:	af 91       	pop	r26
     e2c:	9f 91       	pop	r25
     e2e:	8f 91       	pop	r24
     e30:	7f 91       	pop	r23
     e32:	6f 91       	pop	r22
     e34:	5f 91       	pop	r21
     e36:	4f 91       	pop	r20
     e38:	3f 91       	pop	r19
     e3a:	2f 91       	pop	r18
     e3c:	0f 90       	pop	r0
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	0f 90       	pop	r0
     e42:	1f 90       	pop	r1
     e44:	18 95       	reti

00000e46 <__vector_10>:
* Function Name: ISR of Timer0 on ctc mode
* Purpose      : Generate interrupt in compare match
* Parameters   : Timer0 ctc isr address
* Return value : Void
*****************************************************************************/
ISR(TIMER0_COMP_vect){
     e46:	1f 92       	push	r1
     e48:	0f 92       	push	r0
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	0f 92       	push	r0
     e4e:	11 24       	eor	r1, r1
	if (TIMER0_ctc_Fptr != NULLPTR)
	{
		TIMER0_ctc_Fptr();
	}
     e50:	0f 90       	pop	r0
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	0f 90       	pop	r0
     e56:	1f 90       	pop	r1
     e58:	18 95       	reti

00000e5a <TIMER1_ctcMode_init>:
* Parameters   : Value to be written in registers (uint16_t)
* Return value : Void
*****************************************************************************/
void TIMER1_write(uint16_t value){
	TCNT1L = value;			// This will store the least 8 bits in TCNT1L
	TCNT1H = (value >> 8);	// This will store the most 8 bits in TCNT1H
     e5a:	2e b5       	in	r18, 0x2e	; 46
     e5c:	21 60       	ori	r18, 0x01	; 1
     e5e:	2e bd       	out	0x2e, r18	; 46
     e60:	2e b5       	in	r18, 0x2e	; 46
     e62:	28 60       	ori	r18, 0x08	; 8
     e64:	2e bd       	out	0x2e, r18	; 46
     e66:	2f b5       	in	r18, 0x2f	; 47
     e68:	28 60       	ori	r18, 0x08	; 8
     e6a:	2f bd       	out	0x2f, r18	; 47
     e6c:	2f b5       	in	r18, 0x2f	; 47
     e6e:	20 64       	ori	r18, 0x40	; 64
     e70:	2f bd       	out	0x2f, r18	; 47
     e72:	9b bd       	out	0x2b, r25	; 43
     e74:	8a bd       	out	0x2a, r24	; 42
     e76:	89 b7       	in	r24, 0x39	; 57
     e78:	80 61       	ori	r24, 0x10	; 16
     e7a:	89 bf       	out	0x39, r24	; 57
     e7c:	8f b7       	in	r24, 0x3f	; 63
     e7e:	80 68       	ori	r24, 0x80	; 128
     e80:	8f bf       	out	0x3f, r24	; 63
     e82:	1d bc       	out	0x2d, r1	; 45
     e84:	1c bc       	out	0x2c, r1	; 44
     e86:	70 93 7b 00 	sts	0x007B, r23	; 0x80007b <TIMER1_ctc_Fptr+0x1>
     e8a:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <TIMER1_ctc_Fptr>
     e8e:	08 95       	ret

00000e90 <TIMER1_ctcMode_stop>:
     e90:	1f bc       	out	0x2f, r1	; 47
     e92:	1e bc       	out	0x2e, r1	; 46
     e94:	89 b7       	in	r24, 0x39	; 57
     e96:	83 7c       	andi	r24, 0xC3	; 195
     e98:	89 bf       	out	0x39, r24	; 57
     e9a:	08 95       	ret

00000e9c <__vector_7>:
* Function Name: ISR of Timer1 on ctc mode
* Purpose      : Generate interrupt in compare match
* Parameters   : Timer1 ctc isr address
* Return value : Void
*****************************************************************************/
ISR(TIMER1_COMPA_vect){
     e9c:	1f 92       	push	r1
     e9e:	0f 92       	push	r0
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	0f 92       	push	r0
     ea4:	11 24       	eor	r1, r1
     ea6:	2f 93       	push	r18
     ea8:	3f 93       	push	r19
     eaa:	4f 93       	push	r20
     eac:	5f 93       	push	r21
     eae:	6f 93       	push	r22
     eb0:	7f 93       	push	r23
     eb2:	8f 93       	push	r24
     eb4:	9f 93       	push	r25
     eb6:	af 93       	push	r26
     eb8:	bf 93       	push	r27
     eba:	ef 93       	push	r30
     ebc:	ff 93       	push	r31
	if (TIMER1_ctc_Fptr != NULLPTR)
     ebe:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <TIMER1_ctc_Fptr>
     ec2:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <TIMER1_ctc_Fptr+0x1>
     ec6:	30 97       	sbiw	r30, 0x00	; 0
     ec8:	09 f0       	breq	.+2      	; 0xecc <__vector_7+0x30>
	{
		TIMER1_ctc_Fptr();
     eca:	09 95       	icall
	}
     ecc:	ff 91       	pop	r31
     ece:	ef 91       	pop	r30
     ed0:	bf 91       	pop	r27
     ed2:	af 91       	pop	r26
     ed4:	9f 91       	pop	r25
     ed6:	8f 91       	pop	r24
     ed8:	7f 91       	pop	r23
     eda:	6f 91       	pop	r22
     edc:	5f 91       	pop	r21
     ede:	4f 91       	pop	r20
     ee0:	3f 91       	pop	r19
     ee2:	2f 91       	pop	r18
     ee4:	0f 90       	pop	r0
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	0f 90       	pop	r0
     eea:	1f 90       	pop	r1
     eec:	18 95       	reti

00000eee <TIMER2_ctcMode_init>:
* Purpose      : Write value on timer2 registers
* Parameters   : Value to be written in registers (uint16_t)
* Return value : Void
*****************************************************************************/
void TIMER2_write(uint8_t value){
	TCNT2 = value;
     eee:	95 b5       	in	r25, 0x25	; 37
     ef0:	9b 7f       	andi	r25, 0xFB	; 251
     ef2:	95 bd       	out	0x25, r25	; 37
     ef4:	95 b5       	in	r25, 0x25	; 37
     ef6:	92 60       	ori	r25, 0x02	; 2
     ef8:	95 bd       	out	0x25, r25	; 37
     efa:	95 b5       	in	r25, 0x25	; 37
     efc:	9e 7f       	andi	r25, 0xFE	; 254
     efe:	95 bd       	out	0x25, r25	; 37
     f00:	95 b5       	in	r25, 0x25	; 37
     f02:	90 68       	ori	r25, 0x80	; 128
     f04:	95 bd       	out	0x25, r25	; 37
     f06:	95 b5       	in	r25, 0x25	; 37
     f08:	98 60       	ori	r25, 0x08	; 8
     f0a:	95 bd       	out	0x25, r25	; 37
     f0c:	95 b5       	in	r25, 0x25	; 37
     f0e:	90 61       	ori	r25, 0x10	; 16
     f10:	95 bd       	out	0x25, r25	; 37
     f12:	83 bd       	out	0x23, r24	; 35
     f14:	89 b7       	in	r24, 0x39	; 57
     f16:	80 68       	ori	r24, 0x80	; 128
     f18:	89 bf       	out	0x39, r24	; 57
     f1a:	8f b7       	in	r24, 0x3f	; 63
     f1c:	80 68       	ori	r24, 0x80	; 128
     f1e:	8f bf       	out	0x3f, r24	; 63
     f20:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <TIMER2_ctc_Fptr+0x1>
     f24:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <TIMER2_ctc_Fptr>
     f28:	08 95       	ret

00000f2a <__vector_4>:
* Function Name: ISR of Timer2 on CTC mode
* Purpose      : Generate interrupt in compare match
* Parameters   : Timer0 CTC ISR address
* Return value : Void
*****************************************************************************/
ISR(TIMER2_COMP_vect){
     f2a:	1f 92       	push	r1
     f2c:	0f 92       	push	r0
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	0f 92       	push	r0
     f32:	11 24       	eor	r1, r1
     f34:	2f 93       	push	r18
     f36:	3f 93       	push	r19
     f38:	4f 93       	push	r20
     f3a:	5f 93       	push	r21
     f3c:	6f 93       	push	r22
     f3e:	7f 93       	push	r23
     f40:	8f 93       	push	r24
     f42:	9f 93       	push	r25
     f44:	af 93       	push	r26
     f46:	bf 93       	push	r27
     f48:	ef 93       	push	r30
     f4a:	ff 93       	push	r31
	if (TIMER2_ctc_Fptr != NULLPTR)
     f4c:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <TIMER2_ctc_Fptr>
     f50:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <TIMER2_ctc_Fptr+0x1>
     f54:	30 97       	sbiw	r30, 0x00	; 0
     f56:	09 f0       	breq	.+2      	; 0xf5a <__vector_4+0x30>
	{
		TIMER2_ctc_Fptr();
     f58:	09 95       	icall
	}
     f5a:	ff 91       	pop	r31
     f5c:	ef 91       	pop	r30
     f5e:	bf 91       	pop	r27
     f60:	af 91       	pop	r26
     f62:	9f 91       	pop	r25
     f64:	8f 91       	pop	r24
     f66:	7f 91       	pop	r23
     f68:	6f 91       	pop	r22
     f6a:	5f 91       	pop	r21
     f6c:	4f 91       	pop	r20
     f6e:	3f 91       	pop	r19
     f70:	2f 91       	pop	r18
     f72:	0f 90       	pop	r0
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	0f 90       	pop	r0
     f78:	1f 90       	pop	r1
     f7a:	18 95       	reti

00000f7c <timer1_ptr_function>:
* Purpose      : Function to be passed to timer1 ctc interrupt (increment a variable by 1)
* Parameters   : Void
* Return value : Void
*****************************************************************************/
void timer1_ptr_function(void){
	int_counter++;
     f7c:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <int_counter>
     f80:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <int_counter+0x1>
     f84:	01 96       	adiw	r24, 0x01	; 1
     f86:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <int_counter+0x1>
     f8a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <int_counter>
     f8e:	08 95       	ret

00000f90 <delay_ms>:
* Function Name: delay_ms
* Purpose      : Delay function in milliseconds
* Parameters   : Value in milliseconds (uint16_t)
* Return value : Void
*****************************************************************************/
void delay_ms(uint16_t delayTime){
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	ec 01       	movw	r28, r24
	TIMER1_ctcMode_init(1000, timer1_ptr_function);
     f96:	6e eb       	ldi	r22, 0xBE	; 190
     f98:	77 e0       	ldi	r23, 0x07	; 7
     f9a:	88 ee       	ldi	r24, 0xE8	; 232
     f9c:	93 e0       	ldi	r25, 0x03	; 3
     f9e:	0e 94 2d 07 	call	0xe5a	; 0xe5a <TIMER1_ctcMode_init>
	int_counter = 0;
     fa2:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <int_counter+0x1>
     fa6:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <int_counter>
	// 1 tick == 1 microseconds
	// 1000 ticks == 1 milliseconds
	// Already set timer to generate interrupt when it ticks 1000 times
	// So, we need to interrupt by the value of delay we want
	// Meaning 5000ms == 5000 interrupts
	while (int_counter < delayTime){}
     faa:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <int_counter>
     fae:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <int_counter+0x1>
     fb2:	8c 17       	cp	r24, r28
     fb4:	9d 07       	cpc	r25, r29
     fb6:	c8 f3       	brcs	.-14     	; 0xfaa <delay_ms+0x1a>
	TIMER1_ctcMode_stop();
     fb8:	0e 94 48 07 	call	0xe90	; 0xe90 <TIMER1_ctcMode_stop>
}
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	08 95       	ret

00000fc2 <__divmodsi4>:
     fc2:	05 2e       	mov	r0, r21
     fc4:	97 fb       	bst	r25, 7
     fc6:	1e f4       	brtc	.+6      	; 0xfce <__divmodsi4+0xc>
     fc8:	00 94       	com	r0
     fca:	0e 94 f8 07 	call	0xff0	; 0xff0 <__negsi2>
     fce:	57 fd       	sbrc	r21, 7
     fd0:	07 d0       	rcall	.+14     	; 0xfe0 <__divmodsi4_neg2>
     fd2:	0e 94 00 08 	call	0x1000	; 0x1000 <__udivmodsi4>
     fd6:	07 fc       	sbrc	r0, 7
     fd8:	03 d0       	rcall	.+6      	; 0xfe0 <__divmodsi4_neg2>
     fda:	4e f4       	brtc	.+18     	; 0xfee <__divmodsi4_exit>
     fdc:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <__negsi2>

00000fe0 <__divmodsi4_neg2>:
     fe0:	50 95       	com	r21
     fe2:	40 95       	com	r20
     fe4:	30 95       	com	r19
     fe6:	21 95       	neg	r18
     fe8:	3f 4f       	sbci	r19, 0xFF	; 255
     fea:	4f 4f       	sbci	r20, 0xFF	; 255
     fec:	5f 4f       	sbci	r21, 0xFF	; 255

00000fee <__divmodsi4_exit>:
     fee:	08 95       	ret

00000ff0 <__negsi2>:
     ff0:	90 95       	com	r25
     ff2:	80 95       	com	r24
     ff4:	70 95       	com	r23
     ff6:	61 95       	neg	r22
     ff8:	7f 4f       	sbci	r23, 0xFF	; 255
     ffa:	8f 4f       	sbci	r24, 0xFF	; 255
     ffc:	9f 4f       	sbci	r25, 0xFF	; 255
     ffe:	08 95       	ret

00001000 <__udivmodsi4>:
    1000:	a1 e2       	ldi	r26, 0x21	; 33
    1002:	1a 2e       	mov	r1, r26
    1004:	aa 1b       	sub	r26, r26
    1006:	bb 1b       	sub	r27, r27
    1008:	fd 01       	movw	r30, r26
    100a:	0d c0       	rjmp	.+26     	; 0x1026 <__udivmodsi4_ep>

0000100c <__udivmodsi4_loop>:
    100c:	aa 1f       	adc	r26, r26
    100e:	bb 1f       	adc	r27, r27
    1010:	ee 1f       	adc	r30, r30
    1012:	ff 1f       	adc	r31, r31
    1014:	a2 17       	cp	r26, r18
    1016:	b3 07       	cpc	r27, r19
    1018:	e4 07       	cpc	r30, r20
    101a:	f5 07       	cpc	r31, r21
    101c:	20 f0       	brcs	.+8      	; 0x1026 <__udivmodsi4_ep>
    101e:	a2 1b       	sub	r26, r18
    1020:	b3 0b       	sbc	r27, r19
    1022:	e4 0b       	sbc	r30, r20
    1024:	f5 0b       	sbc	r31, r21

00001026 <__udivmodsi4_ep>:
    1026:	66 1f       	adc	r22, r22
    1028:	77 1f       	adc	r23, r23
    102a:	88 1f       	adc	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	1a 94       	dec	r1
    1030:	69 f7       	brne	.-38     	; 0x100c <__udivmodsi4_loop>
    1032:	60 95       	com	r22
    1034:	70 95       	com	r23
    1036:	80 95       	com	r24
    1038:	90 95       	com	r25
    103a:	9b 01       	movw	r18, r22
    103c:	ac 01       	movw	r20, r24
    103e:	bd 01       	movw	r22, r26
    1040:	cf 01       	movw	r24, r30
    1042:	08 95       	ret

00001044 <_exit>:
    1044:	f8 94       	cli

00001046 <__stop_program>:
    1046:	ff cf       	rjmp	.-2      	; 0x1046 <__stop_program>
